
==> Audit <==
|------------|--------------------------------|------------------|------------|---------|---------------------|---------------------|
|  Command   |              Args              |     Profile      |    User    | Version |     Start Time      |      End Time       |
|------------|--------------------------------|------------------|------------|---------|---------------------|---------------------|
| addons     | enable registry                | minikube         | dayanandks | v1.34.0 | 14 Nov 24 10:19 IST |                     |
| start      | -p devops-multinode            | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:20 IST | 14 Nov 24 10:21 IST |
| service    | product-catalog-service -n     | minikube         | dayanandks | v1.34.0 | 14 Nov 24 10:25 IST |                     |
|            | devops-exercise                |                  |            |         |                     |                     |
| service    | shopping-cart-service -n       | minikube         | dayanandks | v1.34.0 | 14 Nov 24 10:25 IST |                     |
|            | devops-exercise                |                  |            |         |                     |                     |
| stop       |                                | minikube         | dayanandks | v1.34.0 | 14 Nov 24 10:32 IST |                     |
| start      | --nodes 3 -p devops-multinode  | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:39 IST |                     |
| start      | --nodes 3 -p devops-multinode  | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:40 IST | 14 Nov 24 10:42 IST |
| docker-env | devops-multinode docker-env    | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:49 IST |                     |
| docker-env | devops-multinode docker-env    | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:50 IST |                     |
| addons     | enable registry                | minikube         | dayanandks | v1.34.0 | 14 Nov 24 10:50 IST |                     |
| addons     | devops-multinode addons enable | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:52 IST | 14 Nov 24 10:52 IST |
|            | registry                       |                  |            |         |                     |                     |
| stop       | -p devops-multinode            | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:55 IST | 14 Nov 24 10:55 IST |
| start      | -p devops-multinode            | devops-multinode | dayanandks | v1.34.0 | 14 Nov 24 10:55 IST |                     |
| start      |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 12:04 IST | 25 Nov 24 12:05 IST |
| start      |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 12:53 IST | 25 Nov 24 12:54 IST |
| dashboard  |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 12:54 IST |                     |
| service    | treasurebook-api-service --url | minikube         | dayanandks | v1.34.0 | 25 Nov 24 13:00 IST |                     |
| start      |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 13:02 IST | 25 Nov 24 13:03 IST |
| service    | treasurebook-api-service --url | minikube         | dayanandks | v1.34.0 | 25 Nov 24 13:05 IST | 25 Nov 24 13:06 IST |
| service    | treasurebook-api-service --url | minikube         | dayanandks | v1.34.0 | 25 Nov 24 13:13 IST | 25 Nov 24 13:15 IST |
| ip         |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 13:15 IST | 25 Nov 24 13:15 IST |
| service    | treasurebook-api-service --url | minikube         | dayanandks | v1.34.0 | 25 Nov 24 13:22 IST | 25 Nov 24 13:23 IST |
| tunnel     |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 13:23 IST | 25 Nov 24 13:35 IST |
| start      |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 14:01 IST |                     |
| start      |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 14:04 IST |                     |
| start      |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 14:05 IST |                     |
| stop       |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 14:08 IST | 25 Nov 24 14:09 IST |
| start      |                                | minikube         | dayanandks | v1.34.0 | 25 Nov 24 14:09 IST |                     |
| stop       |                                | minikube         | dayanandks | v1.34.0 | 28 Nov 24 10:34 IST |                     |
| delete     |                                | minikube         | dayanandks | v1.34.0 | 28 Nov 24 10:34 IST | 28 Nov 24 10:34 IST |
| start      | --nodes 3 -p devops-multinode  | devops-multinode | dayanandks | v1.34.0 | 28 Nov 24 10:34 IST | 28 Nov 24 10:35 IST |
|            | --force                        |                  |            |         |                     |                     |
| addons     | devops-multinode addons enable | devops-multinode | dayanandks | v1.34.0 | 28 Nov 24 10:35 IST | 28 Nov 24 10:35 IST |
|            | registry                       |                  |            |         |                     |                     |
| image      | devops-multinode image load    | devops-multinode | dayanandks | v1.34.0 | 28 Nov 24 10:39 IST | 28 Nov 24 10:39 IST |
|            | product-catalog:latest         |                  |            |         |                     |                     |
| image      | devops-multinode image load    | devops-multinode | dayanandks | v1.34.0 | 28 Nov 24 10:39 IST | 28 Nov 24 10:40 IST |
|            | shopping-cart:latest           |                  |            |         |                     |                     |
| image      | devops-multinode image load    | devops-multinode | dayanandks | v1.34.0 | 28 Nov 24 10:40 IST | 28 Nov 24 10:40 IST |
|            | product-catalog:latest         |                  |            |         |                     |                     |
| service    | devops-multinode service       | devops-multinode | dayanandks | v1.34.0 | 28 Nov 24 10:46 IST |                     |
|            | product-catalog-service        |                  |            |         |                     |                     |
| service    | devops-multinode service       | devops-multinode | dayanandks | v1.34.0 | 28 Nov 24 10:47 IST |                     |
|            | shopping-cart-service          |                  |            |         |                     |                     |
| start      |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:19 IST | 03 Jan 25 17:20 IST |
| docker-env |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:22 IST | 03 Jan 25 17:22 IST |
| docker-env | minikube docker-env            | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:22 IST | 03 Jan 25 17:22 IST |
| docker-env |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:23 IST | 03 Jan 25 17:23 IST |
| service    | flask-app-service --url        | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:28 IST |                     |
| service    | flask-app --url                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:29 IST |                     |
| service    | flask-app-service --url        | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:32 IST |                     |
| stop       |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:34 IST | 03 Jan 25 17:35 IST |
| stop       |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:37 IST | 03 Jan 25 17:37 IST |
| delete     |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 17:37 IST | 03 Jan 25 17:37 IST |
| start      | --nodes 3 -p devops-multinode  | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:20 IST |                     |
|            | --force                        |                  |            |         |                     |                     |
| stop       |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 19:22 IST |                     |
| delete     |                                | minikube         | dayanandks | v1.34.0 | 03 Jan 25 19:22 IST | 03 Jan 25 19:22 IST |
| start      | --nodes 3 -p devops-multinode  | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:23 IST |                     |
|            | --force                        |                  |            |         |                     |                     |
| delete     | -p devops-multinode            | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:32 IST | 03 Jan 25 19:32 IST |
| start      | --nodes 3 -p devops-multinode  | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:32 IST | 03 Jan 25 19:33 IST |
|            | --force                        |                  |            |         |                     |                     |
| addons     | devops-multinode addons enable | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:34 IST | 03 Jan 25 19:35 IST |
|            | registry                       |                  |            |         |                     |                     |
| image      | devops-multinode image load    | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:36 IST | 03 Jan 25 19:37 IST |
|            | product-catalog:latest         |                  |            |         |                     |                     |
| image      | devops-multinode image load    | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:37 IST | 03 Jan 25 19:37 IST |
|            | shopping-cart:latest           |                  |            |         |                     |                     |
| ssh        | devops-multinode ssh -- docker | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:37 IST | 03 Jan 25 19:37 IST |
|            | images                         |                  |            |         |                     |                     |
| service    | devops-multinode service       | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:45 IST |                     |
|            | product-catalog-service        |                  |            |         |                     |                     |
| service    | devops-multinode service       | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:46 IST |                     |
|            | shopping-cart-service          |                  |            |         |                     |                     |
| ssh        | devops-multinode ssh -- docker | devops-multinode | dayanandks | v1.34.0 | 03 Jan 25 19:47 IST | 03 Jan 25 19:47 IST |
|            | images                         |                  |            |         |                     |                     |
|------------|--------------------------------|------------------|------------|---------|---------------------|---------------------|


==> Last Start <==
Log file created at: 2025/01/03 19:32:52
Running on machine: dayanands-MacBook-Air
Binary: Built with gc go1.22.5 for darwin/arm64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0103 19:32:52.394719   68208 out.go:345] Setting OutFile to fd 1 ...
I0103 19:32:52.394949   68208 out.go:397] isatty.IsTerminal(1) = true
I0103 19:32:52.394952   68208 out.go:358] Setting ErrFile to fd 2...
I0103 19:32:52.394955   68208 out.go:397] isatty.IsTerminal(2) = true
I0103 19:32:52.395180   68208 root.go:338] Updating PATH: /Users/dayanandks/.minikube/bin
I0103 19:32:52.395693   68208 out.go:352] Setting JSON to false
I0103 19:32:52.438315   68208 start.go:129] hostinfo: {"hostname":"dayanands-MacBook-Air.local","uptime":18247005,"bootTime":1717665967,"procs":376,"os":"darwin","platform":"darwin","platformFamily":"Standalone Workstation","platformVersion":"14.5","kernelVersion":"23.5.0","kernelArch":"arm64","virtualizationSystem":"","virtualizationRole":"","hostId":"2ea1ed3b-98fb-56a2-a3bd-700d2af1c764"}
W0103 19:32:52.438425   68208 start.go:137] gopshost.Virtualization returned error: not implemented yet
I0103 19:32:52.444076   68208 out.go:177] 😄  [devops-multinode] minikube v1.34.0 on Darwin 14.5 (arm64)
W0103 19:32:52.450480   68208 out.go:270] ❗  minikube skips various validations when --force is supplied; this may lead to unexpected behavior
I0103 19:32:52.450587   68208 notify.go:220] Checking for updates...
I0103 19:32:52.451456   68208 driver.go:394] Setting default libvirt URI to qemu:///system
I0103 19:32:52.451815   68208 global.go:112] Querying for installed drivers using PATH=/Users/dayanandks/.minikube/bin:/Users/dayanandks/.rvm/gems/ruby-2.7.3/bin:/Users/dayanandks/.rvm/gems/ruby-2.7.3@global/bin:/Users/dayanandks/.rvm/rubies/ruby-2.7.3/bin:/Users/dayanandks/bin:/opt/homebrew/bin:/Library/Frameworks/Python.framework/Versions/3.12/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/Applications/VMware Fusion.app/Contents/Public:/usr/local/go/bin:/Users/dayanandks/flutterdev/flutter/bin:/Users/dayanandks/.rvm/bin
I0103 19:32:52.452681   68208 global.go:133] parallels default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "prlctl": executable file not found in $PATH Reason: Fix:Install Parallels Desktop for Mac Doc:https://minikube.sigs.k8s.io/docs/drivers/parallels/ Version:}
I0103 19:32:52.454549   68208 global.go:133] qemu2 default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "qemu-system-aarch64": executable file not found in $PATH Reason: Fix:Install qemu-system Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/qemu/ Version:}
I0103 19:32:52.454679   68208 global.go:133] vmware default: false priority: 5, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "vmrun": executable file not found in $PATH Reason: Fix:Install vmrun Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/vmware/ Version:}
I0103 19:32:52.454977   68208 global.go:133] podman default: true priority: 3, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "podman": executable file not found in $PATH Reason: Fix:Install Podman Doc:https://minikube.sigs.k8s.io/docs/drivers/podman/ Version:}
I0103 19:32:52.454985   68208 global.go:133] ssh default: false priority: 4, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0103 19:32:52.455177   68208 global.go:133] hyperkit default: true priority: 8, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "hyperkit": executable file not found in $PATH Reason: Fix:Run 'brew install hyperkit' Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/hyperkit/ Version:}
I0103 19:32:52.455260   68208 global.go:133] vfkit default: true priority: 3, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "vfkit": executable file not found in $PATH Reason: Fix:Run 'brew tap cfergeau/crc && brew install vfkit' Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/vfkit/ Version:}
I0103 19:32:52.658006   68208 virtualbox.go:136] virtual box version: 7.1.2r164945
I0103 19:32:52.658048   68208 global.go:133] virtualbox default: true priority: 6, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:7.1.2r164945
}
I0103 19:32:52.703076   68208 docker.go:123] docker version: linux-27.2.0:Docker Desktop 4.34.2 (167172)
I0103 19:32:52.703374   68208 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0103 19:32:53.124880   68208 info.go:266] docker info: {ID:0bf61ef9-0a43-4fbc-833a-31893f112997 Containers:35 ContainersRunning:19 ContainersPaused:0 ContainersStopped:16 Images:16 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:161 OomKillDisable:false NGoroutines:168 SystemTime:2025-01-03 14:02:53.108621169 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:15 KernelVersion:6.10.4-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:aarch64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:4111306752 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[com.docker.desktop.address=unix:///Users/dayanandks/Library/Containers/com.docker.docker/Data/docker-cli.sock] ExperimentalBuild:false ServerVersion:27.2.0 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:8fc6bcff51318944179630522a095cc9dbf9f353 Expected:8fc6bcff51318944179630522a095cc9dbf9f353} RuncCommit:{ID:v1.1.13-0-g58aa920 Expected:v1.1.13-0-g58aa920} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=unconfined name=cgroupns] ProductLicense: Warnings:[WARNING: daemon is not using the default seccomp profile] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/Users/dayanandks/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.16.2-desktop.1] map[Name:compose Path:/Users/dayanandks/.docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.29.2-desktop.2] map[Name:debug Path:/Users/dayanandks/.docker/cli-plugins/docker-debug SchemaVersion:0.1.0 ShortDescription:Get a shell into any image or container Vendor:Docker Inc. Version:0.0.34] map[Name:desktop Path:/Users/dayanandks/.docker/cli-plugins/docker-desktop SchemaVersion:0.1.0 ShortDescription:Docker Desktop commands (Alpha) Vendor:Docker Inc. Version:v0.0.15] map[Name:dev Path:/Users/dayanandks/.docker/cli-plugins/docker-dev SchemaVersion:0.1.0 ShortDescription:Docker Dev Environments Vendor:Docker Inc. Version:v0.1.2] map[Name:extension Path:/Users/dayanandks/.docker/cli-plugins/docker-extension SchemaVersion:0.1.0 ShortDescription:Manages Docker extensions Vendor:Docker Inc. Version:v0.2.25] map[Name:feedback Path:/Users/dayanandks/.docker/cli-plugins/docker-feedback SchemaVersion:0.1.0 ShortDescription:Provide feedback, right in your terminal! Vendor:Docker Inc. Version:v1.0.5] map[Name:init Path:/Users/dayanandks/.docker/cli-plugins/docker-init SchemaVersion:0.1.0 ShortDescription:Creates Docker-related starter files for your project Vendor:Docker Inc. Version:v1.3.0] map[Name:sbom Path:/Users/dayanandks/.docker/cli-plugins/docker-sbom SchemaVersion:0.1.0 ShortDescription:View the packaged-based Software Bill Of Materials (SBOM) for an image URL:https://github.com/docker/sbom-cli-plugin Vendor:Anchore Inc. Version:0.6.0] map[Name:scout Path:/Users/dayanandks/.docker/cli-plugins/docker-scout SchemaVersion:0.1.0 ShortDescription:Docker Scout Vendor:Docker Inc. Version:v1.13.0]] Warnings:<nil>}}
I0103 19:32:53.125024   68208 global.go:133] docker default: true priority: 9, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0103 19:32:53.125041   68208 driver.go:316] not recommending "ssh" due to default: false
I0103 19:32:53.125059   68208 driver.go:351] Picked: docker
I0103 19:32:53.125066   68208 driver.go:352] Alternatives: [virtualbox ssh]
I0103 19:32:53.125069   68208 driver.go:353] Rejects: [parallels qemu2 vmware podman hyperkit vfkit]
I0103 19:32:53.132068   68208 out.go:177] ✨  Automatically selected the docker driver. Other choices: virtualbox, ssh
I0103 19:32:53.136062   68208 start.go:297] selected driver: docker
I0103 19:32:53.136067   68208 start.go:901] validating driver "docker" against <nil>
I0103 19:32:53.136079   68208 start.go:912] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0103 19:32:53.136318   68208 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0103 19:32:53.231191   68208 info.go:266] docker info: {ID:0bf61ef9-0a43-4fbc-833a-31893f112997 Containers:35 ContainersRunning:19 ContainersPaused:0 ContainersStopped:16 Images:16 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:161 OomKillDisable:false NGoroutines:168 SystemTime:2025-01-03 14:02:53.219225127 +0000 UTC LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:15 KernelVersion:6.10.4-linuxkit OperatingSystem:Docker Desktop OSType:linux Architecture:aarch64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:4111306752 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy:http.docker.internal:3128 HTTPSProxy:http.docker.internal:3128 NoProxy:hubproxy.docker.internal Name:docker-desktop Labels:[com.docker.desktop.address=unix:///Users/dayanandks/Library/Containers/com.docker.docker/Data/docker-cli.sock] ExperimentalBuild:false ServerVersion:27.2.0 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:8fc6bcff51318944179630522a095cc9dbf9f353 Expected:8fc6bcff51318944179630522a095cc9dbf9f353} RuncCommit:{ID:v1.1.13-0-g58aa920 Expected:v1.1.13-0-g58aa920} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=unconfined name=cgroupns] ProductLicense: Warnings:[WARNING: daemon is not using the default seccomp profile] ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/Users/dayanandks/.docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.16.2-desktop.1] map[Name:compose Path:/Users/dayanandks/.docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.29.2-desktop.2] map[Name:debug Path:/Users/dayanandks/.docker/cli-plugins/docker-debug SchemaVersion:0.1.0 ShortDescription:Get a shell into any image or container Vendor:Docker Inc. Version:0.0.34] map[Name:desktop Path:/Users/dayanandks/.docker/cli-plugins/docker-desktop SchemaVersion:0.1.0 ShortDescription:Docker Desktop commands (Alpha) Vendor:Docker Inc. Version:v0.0.15] map[Name:dev Path:/Users/dayanandks/.docker/cli-plugins/docker-dev SchemaVersion:0.1.0 ShortDescription:Docker Dev Environments Vendor:Docker Inc. Version:v0.1.2] map[Name:extension Path:/Users/dayanandks/.docker/cli-plugins/docker-extension SchemaVersion:0.1.0 ShortDescription:Manages Docker extensions Vendor:Docker Inc. Version:v0.2.25] map[Name:feedback Path:/Users/dayanandks/.docker/cli-plugins/docker-feedback SchemaVersion:0.1.0 ShortDescription:Provide feedback, right in your terminal! Vendor:Docker Inc. Version:v1.0.5] map[Name:init Path:/Users/dayanandks/.docker/cli-plugins/docker-init SchemaVersion:0.1.0 ShortDescription:Creates Docker-related starter files for your project Vendor:Docker Inc. Version:v1.3.0] map[Name:sbom Path:/Users/dayanandks/.docker/cli-plugins/docker-sbom SchemaVersion:0.1.0 ShortDescription:View the packaged-based Software Bill Of Materials (SBOM) for an image URL:https://github.com/docker/sbom-cli-plugin Vendor:Anchore Inc. Version:0.6.0] map[Name:scout Path:/Users/dayanandks/.docker/cli-plugins/docker-scout SchemaVersion:0.1.0 ShortDescription:Docker Scout Vendor:Docker Inc. Version:v1.13.0]] Warnings:<nil>}}
I0103 19:32:53.231417   68208 start_flags.go:310] no existing cluster config was found, will generate one from the flags 
I0103 19:32:53.235616   68208 start_flags.go:393] Using suggested 2200MB memory alloc based on sys=8192MB, container=3920MB
I0103 19:32:53.236104   68208 start_flags.go:929] Wait components to verify : map[apiserver:true system_pods:true]
I0103 19:32:53.240038   68208 out.go:177] 📌  Using Docker Desktop driver with root privileges
I0103 19:32:53.241846   68208 cni.go:84] Creating CNI manager for ""
I0103 19:32:53.241867   68208 cni.go:136] multinode detected (0 nodes found), recommending kindnet
I0103 19:32:53.241884   68208 start_flags.go:319] Found "CNI" CNI - setting NetworkPlugin=cni
I0103 19:32:53.242208   68208 start.go:340] cluster config:
{Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0103 19:32:53.246040   68208 out.go:177] 👍  Starting "devops-multinode" primary control-plane node in "devops-multinode" cluster
I0103 19:32:53.252074   68208 cache.go:121] Beginning downloading kic base image for docker with docker
I0103 19:32:53.255998   68208 out.go:177] 🚜  Pulling base image v0.0.45 ...
I0103 19:32:53.260865   68208 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local docker daemon
I0103 19:32:53.260988   68208 preload.go:131] Checking if preload exists for k8s version v1.31.0 and runtime docker
I0103 19:32:53.261004   68208 preload.go:146] Found local preload: /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4
I0103 19:32:53.261013   68208 cache.go:56] Caching tarball of preloaded images
I0103 19:32:53.261257   68208 preload.go:172] Found /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4 in cache, skipping download
I0103 19:32:53.261388   68208 cache.go:59] Finished verifying existence of preloaded tar for v1.31.0 on docker
I0103 19:32:53.263252   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
I0103 19:32:53.263276   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.minikube/profiles/devops-multinode/config.json: {Name:mk439fa19909e17502cbe675275536d31084999e Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
W0103 19:32:53.289395   68208 image.go:95] image gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 is of wrong architecture
I0103 19:32:53.289405   68208 cache.go:149] Downloading gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 to local cache
I0103 19:32:53.289518   68208 image.go:63] Checking for gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local cache directory
I0103 19:32:53.289531   68208 image.go:66] Found gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local cache directory, skipping pull
I0103 19:32:53.289549   68208 image.go:135] gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 exists in cache, skipping pull
I0103 19:32:53.289555   68208 cache.go:152] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 as a tarball
I0103 19:32:53.289558   68208 cache.go:162] Loading gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 from local cache
I0103 19:32:54.844951   68208 cache.go:164] successfully loaded and using gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 from cached tarball
I0103 19:32:54.845032   68208 cache.go:194] Successfully downloaded all kic artifacts
I0103 19:32:54.845148   68208 start.go:360] acquireMachinesLock for devops-multinode: {Name:mk57f39ae44f9ab43537145df56b59066c3efcae Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0103 19:32:54.845385   68208 start.go:364] duration metric: took 211.125µs to acquireMachinesLock for "devops-multinode"
I0103 19:32:54.845451   68208 start.go:93] Provisioning new machine with config: &{Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} &{Name: IP: Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true}
I0103 19:32:54.845632   68208 start.go:125] createHost starting for "" (driver="docker")
I0103 19:32:54.854732   68208 out.go:235] 🔥  Creating docker container (CPUs=2, Memory=2200MB) ...
I0103 19:32:54.855592   68208 start.go:159] libmachine.API.Create for "devops-multinode" (driver="docker")
I0103 19:32:54.855633   68208 client.go:168] LocalClient.Create starting
I0103 19:32:54.856006   68208 main.go:141] libmachine: Reading certificate data from /Users/dayanandks/.minikube/certs/ca.pem
I0103 19:32:54.856370   68208 main.go:141] libmachine: Decoding PEM data...
I0103 19:32:54.856394   68208 main.go:141] libmachine: Parsing certificate...
I0103 19:32:54.857081   68208 main.go:141] libmachine: Reading certificate data from /Users/dayanandks/.minikube/certs/cert.pem
I0103 19:32:54.857322   68208 main.go:141] libmachine: Decoding PEM data...
I0103 19:32:54.857356   68208 main.go:141] libmachine: Parsing certificate...
I0103 19:32:54.858452   68208 cli_runner.go:164] Run: docker network inspect devops-multinode --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0103 19:32:54.883865   68208 cli_runner.go:211] docker network inspect devops-multinode --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0103 19:32:54.883986   68208 network_create.go:284] running [docker network inspect devops-multinode] to gather additional debugging logs...
I0103 19:32:54.884000   68208 cli_runner.go:164] Run: docker network inspect devops-multinode
W0103 19:32:54.911012   68208 cli_runner.go:211] docker network inspect devops-multinode returned with exit code 1
I0103 19:32:54.911033   68208 network_create.go:287] error running [docker network inspect devops-multinode]: docker network inspect devops-multinode: exit status 1
stdout:
[]

stderr:
Error response from daemon: network devops-multinode not found
I0103 19:32:54.911049   68208 network_create.go:289] output of [docker network inspect devops-multinode]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network devops-multinode not found

** /stderr **
I0103 19:32:54.911179   68208 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0103 19:32:54.929362   68208 network.go:206] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0x14001702200}
I0103 19:32:54.929395   68208 network_create.go:124] attempt to create docker network devops-multinode 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 65535 ...
I0103 19:32:54.929468   68208 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=65535 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=devops-multinode devops-multinode
I0103 19:32:54.979967   68208 network_create.go:108] docker network devops-multinode 192.168.49.0/24 created
I0103 19:32:54.980001   68208 kic.go:121] calculated static IP "192.168.49.2" for the "devops-multinode" container
I0103 19:32:54.980129   68208 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0103 19:32:55.006929   68208 cli_runner.go:164] Run: docker volume create devops-multinode --label name.minikube.sigs.k8s.io=devops-multinode --label created_by.minikube.sigs.k8s.io=true
I0103 19:32:55.029195   68208 oci.go:103] Successfully created a docker volume devops-multinode
I0103 19:32:55.029322   68208 cli_runner.go:164] Run: docker run --rm --name devops-multinode-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=devops-multinode --entrypoint /usr/bin/test -v devops-multinode:/var gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -d /var/lib
I0103 19:32:55.803518   68208 oci.go:107] Successfully prepared a docker volume devops-multinode
I0103 19:32:55.803568   68208 preload.go:131] Checking if preload exists for k8s version v1.31.0 and runtime docker
I0103 19:32:55.803595   68208 kic.go:194] Starting extracting preloaded images to volume ...
I0103 19:32:55.805709   68208 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v devops-multinode:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -I lz4 -xf /preloaded.tar -C /extractDir
I0103 19:32:59.230765   68208 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v devops-multinode:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -I lz4 -xf /preloaded.tar -C /extractDir: (3.424947917s)
I0103 19:32:59.230890   68208 kic.go:203] duration metric: took 3.427301166s to extract preloaded images to volume ...
I0103 19:32:59.231263   68208 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0103 19:32:59.862080   68208 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname devops-multinode --name devops-multinode --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=devops-multinode --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=devops-multinode --network devops-multinode --ip 192.168.49.2 --volume devops-multinode:/var --security-opt apparmor=unconfined --memory=2200mb --memory-swap=2200mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85
I0103 19:33:00.157310   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Running}}
I0103 19:33:00.180758   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:00.199547   68208 cli_runner.go:164] Run: docker exec devops-multinode stat /var/lib/dpkg/alternatives/iptables
I0103 19:33:00.265433   68208 oci.go:144] the created container "devops-multinode" has a running status.
I0103 19:33:00.265861   68208 kic.go:225] Creating ssh key for kic: /Users/dayanandks/.minikube/machines/devops-multinode/id_rsa...
I0103 19:33:00.334350   68208 kic_runner.go:191] docker (temp): /Users/dayanandks/.minikube/machines/devops-multinode/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0103 19:33:00.385188   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:00.403515   68208 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0103 19:33:00.403534   68208 kic_runner.go:114] Args: [docker exec --privileged devops-multinode chown docker:docker /home/docker/.ssh/authorized_keys]
I0103 19:33:00.451279   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:00.477483   68208 machine.go:93] provisionDockerMachine start ...
I0103 19:33:00.478587   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:00.506249   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:00.506832   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55644 <nil> <nil>}
I0103 19:33:00.506843   68208 main.go:141] libmachine: About to run SSH command:
hostname
I0103 19:33:00.655780   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: devops-multinode

I0103 19:33:00.655803   68208 ubuntu.go:169] provisioning hostname "devops-multinode"
I0103 19:33:00.655902   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:00.677342   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:00.677535   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55644 <nil> <nil>}
I0103 19:33:00.677541   68208 main.go:141] libmachine: About to run SSH command:
sudo hostname devops-multinode && echo "devops-multinode" | sudo tee /etc/hostname
I0103 19:33:00.797376   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: devops-multinode

I0103 19:33:00.797578   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:00.823265   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:00.823475   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55644 <nil> <nil>}
I0103 19:33:00.823485   68208 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sdevops-multinode' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 devops-multinode/g' /etc/hosts;
			else 
				echo '127.0.1.1 devops-multinode' | sudo tee -a /etc/hosts; 
			fi
		fi
I0103 19:33:00.932209   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0103 19:33:00.932252   68208 ubuntu.go:175] set auth options {CertDir:/Users/dayanandks/.minikube CaCertPath:/Users/dayanandks/.minikube/certs/ca.pem CaPrivateKeyPath:/Users/dayanandks/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/Users/dayanandks/.minikube/machines/server.pem ServerKeyPath:/Users/dayanandks/.minikube/machines/server-key.pem ClientKeyPath:/Users/dayanandks/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/Users/dayanandks/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/Users/dayanandks/.minikube}
I0103 19:33:00.932302   68208 ubuntu.go:177] setting up certificates
I0103 19:33:00.933447   68208 provision.go:84] configureAuth start
I0103 19:33:00.934137   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode
I0103 19:33:00.961782   68208 provision.go:143] copyHostCerts
I0103 19:33:00.962097   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/ca.pem, removing ...
I0103 19:33:00.962109   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/ca.pem
I0103 19:33:00.962315   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/ca.pem --> /Users/dayanandks/.minikube/ca.pem (1090 bytes)
I0103 19:33:00.962769   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/cert.pem, removing ...
I0103 19:33:00.962774   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/cert.pem
I0103 19:33:00.962887   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/cert.pem --> /Users/dayanandks/.minikube/cert.pem (1131 bytes)
I0103 19:33:00.963352   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/key.pem, removing ...
I0103 19:33:00.963356   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/key.pem
I0103 19:33:00.963452   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/key.pem --> /Users/dayanandks/.minikube/key.pem (1679 bytes)
I0103 19:33:00.963739   68208 provision.go:117] generating server cert: /Users/dayanandks/.minikube/machines/server.pem ca-key=/Users/dayanandks/.minikube/certs/ca.pem private-key=/Users/dayanandks/.minikube/certs/ca-key.pem org=dayanandks.devops-multinode san=[127.0.0.1 192.168.49.2 devops-multinode localhost minikube]
I0103 19:33:01.013703   68208 provision.go:177] copyRemoteCerts
I0103 19:33:01.015296   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0103 19:33:01.015379   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:01.034335   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:01.123545   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/machines/server.pem --> /etc/docker/server.pem (1224 bytes)
I0103 19:33:01.142800   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0103 19:33:01.157280   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1090 bytes)
I0103 19:33:01.170870   68208 provision.go:87] duration metric: took 237.392375ms to configureAuth
I0103 19:33:01.170880   68208 ubuntu.go:193] setting minikube options for container-runtime
I0103 19:33:01.171232   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:01.171316   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:01.190062   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:01.190240   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55644 <nil> <nil>}
I0103 19:33:01.190244   68208 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0103 19:33:01.298847   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0103 19:33:01.298859   68208 ubuntu.go:71] root file system type: overlay
I0103 19:33:01.299013   68208 provision.go:314] Updating docker unit: /lib/systemd/system/docker.service ...
I0103 19:33:01.299381   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:01.324802   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:01.324982   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55644 <nil> <nil>}
I0103 19:33:01.325031   68208 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %s "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0103 19:33:01.443176   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0103 19:33:01.443334   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:01.471658   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:01.471851   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55644 <nil> <nil>}
I0103 19:33:01.471861   68208 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0103 19:33:01.957364   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2024-08-27 14:13:43.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2025-01-03 14:03:01.440034006 +0000
@@ -1,46 +1,49 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
+LimitNOFILE=infinity
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0103 19:33:01.957380   68208 machine.go:96] duration metric: took 1.479855417s to provisionDockerMachine
I0103 19:33:01.957406   68208 client.go:171] duration metric: took 7.101789375s to LocalClient.Create
I0103 19:33:01.957719   68208 start.go:167] duration metric: took 7.102147041s to libmachine.API.Create "devops-multinode"
I0103 19:33:01.957923   68208 start.go:293] postStartSetup for "devops-multinode" (driver="docker")
I0103 19:33:01.957946   68208 start.go:322] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0103 19:33:01.958088   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0103 19:33:01.958187   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:01.982535   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:02.066111   68208 ssh_runner.go:195] Run: cat /etc/os-release
I0103 19:33:02.068489   68208 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0103 19:33:02.068527   68208 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0103 19:33:02.068560   68208 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0103 19:33:02.068565   68208 info.go:137] Remote host: Ubuntu 22.04.4 LTS
I0103 19:33:02.070136   68208 filesync.go:126] Scanning /Users/dayanandks/.minikube/addons for local assets ...
I0103 19:33:02.070338   68208 filesync.go:126] Scanning /Users/dayanandks/.minikube/files for local assets ...
I0103 19:33:02.070417   68208 start.go:296] duration metric: took 112.485917ms for postStartSetup
I0103 19:33:02.071361   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode
I0103 19:33:02.096976   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
I0103 19:33:02.097474   68208 start.go:128] duration metric: took 7.25185075s to createHost
I0103 19:33:02.097488   68208 start.go:83] releasing machines lock for "devops-multinode", held for 7.252107291s
I0103 19:33:02.097778   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode
I0103 19:33:02.118241   68208 ssh_runner.go:195] Run: cat /version.json
I0103 19:33:02.118305   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:02.118679   68208 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0103 19:33:02.119356   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:02.136200   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:02.136268   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:02.541741   68208 ssh_runner.go:195] Run: systemctl --version
I0103 19:33:02.546665   68208 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0103 19:33:02.549983   68208 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0103 19:33:02.567540   68208 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0103 19:33:02.567870   68208 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%p, " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0103 19:33:02.586128   68208 cni.go:262] disabled [/etc/cni/net.d/100-crio-bridge.conf, /etc/cni/net.d/87-podman-bridge.conflist] bridge cni config(s)
I0103 19:33:02.586565   68208 start.go:495] detecting cgroup driver to use...
I0103 19:33:02.586609   68208 detect.go:187] detected "cgroupfs" cgroup driver on host os
I0103 19:33:02.588286   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0103 19:33:02.598544   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.10"|' /etc/containerd/config.toml"
I0103 19:33:02.604357   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0103 19:33:02.611028   68208 containerd.go:146] configuring containerd to use "cgroupfs" as cgroup driver...
I0103 19:33:02.611099   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0103 19:33:02.617103   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0103 19:33:02.623154   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0103 19:33:02.629064   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0103 19:33:02.634772   68208 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0103 19:33:02.640240   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0103 19:33:02.645943   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i '/^ *enable_unprivileged_ports = .*/d' /etc/containerd/config.toml"
I0103 19:33:02.651560   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)\[plugins."io.containerd.grpc.v1.cri"\]|&\n\1  enable_unprivileged_ports = true|' /etc/containerd/config.toml"
I0103 19:33:02.657797   68208 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0103 19:33:02.663039   68208 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0103 19:33:02.668733   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:02.711646   68208 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0103 19:33:02.791255   68208 start.go:495] detecting cgroup driver to use...
I0103 19:33:02.791276   68208 detect.go:187] detected "cgroupfs" cgroup driver on host os
I0103 19:33:02.791687   68208 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0103 19:33:02.799895   68208 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0103 19:33:02.799989   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0103 19:33:02.807736   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0103 19:33:02.817407   68208 ssh_runner.go:195] Run: which cri-dockerd
I0103 19:33:02.820612   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0103 19:33:02.826305   68208 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (190 bytes)
I0103 19:33:02.838497   68208 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0103 19:33:02.884234   68208 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0103 19:33:02.948550   68208 docker.go:574] configuring docker to use "cgroupfs" as cgroup driver...
I0103 19:33:02.948693   68208 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (130 bytes)
I0103 19:33:02.960221   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:03.004167   68208 ssh_runner.go:195] Run: sudo systemctl restart docker
I0103 19:33:03.204648   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.socket
I0103 19:33:03.214353   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0103 19:33:03.221983   68208 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0103 19:33:03.272622   68208 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0103 19:33:03.315201   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:03.355144   68208 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0103 19:33:03.380889   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0103 19:33:03.387664   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:03.432316   68208 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.service
I0103 19:33:03.499494   68208 start.go:542] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0103 19:33:03.499866   68208 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0103 19:33:03.502798   68208 start.go:563] Will wait 60s for crictl version
I0103 19:33:03.502965   68208 ssh_runner.go:195] Run: which crictl
I0103 19:33:03.505419   68208 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0103 19:33:03.546002   68208 start.go:579] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  27.2.0
RuntimeApiVersion:  v1
I0103 19:33:03.546136   68208 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0103 19:33:03.574869   68208 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0103 19:33:03.595732   68208 out.go:235] 🐳  Preparing Kubernetes v1.31.0 on Docker 27.2.0 ...
I0103 19:33:03.596160   68208 cli_runner.go:164] Run: docker exec -t devops-multinode dig +short host.docker.internal
I0103 19:33:03.671986   68208 network.go:96] got host ip for mount in container by digging dns: 192.168.65.254
I0103 19:33:03.672315   68208 ssh_runner.go:195] Run: grep 192.168.65.254	host.minikube.internal$ /etc/hosts
I0103 19:33:03.676107   68208 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.65.254	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0103 19:33:03.684401   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:03.704233   68208 kubeadm.go:883] updating cluster {Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} ...
I0103 19:33:03.704356   68208 preload.go:131] Checking if preload exists for k8s version v1.31.0 and runtime docker
I0103 19:33:03.704414   68208 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0103 19:33:03.716608   68208 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.31.0
registry.k8s.io/kube-scheduler:v1.31.0
registry.k8s.io/kube-controller-manager:v1.31.0
registry.k8s.io/kube-proxy:v1.31.0
registry.k8s.io/etcd:3.5.15-0
registry.k8s.io/pause:3.10
registry.k8s.io/coredns/coredns:v1.11.1
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0103 19:33:03.716618   68208 docker.go:615] Images already preloaded, skipping extraction
I0103 19:33:03.716691   68208 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0103 19:33:03.728426   68208 docker.go:685] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.31.0
registry.k8s.io/kube-scheduler:v1.31.0
registry.k8s.io/kube-controller-manager:v1.31.0
registry.k8s.io/kube-proxy:v1.31.0
registry.k8s.io/etcd:3.5.15-0
registry.k8s.io/pause:3.10
registry.k8s.io/coredns/coredns:v1.11.1
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0103 19:33:03.728434   68208 cache_images.go:84] Images are preloaded, skipping loading
I0103 19:33:03.728438   68208 kubeadm.go:934] updating node { 192.168.49.2 8443 v1.31.0 docker true true} ...
I0103 19:33:03.728964   68208 kubeadm.go:946] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.31.0/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --hostname-override=devops-multinode --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:}
I0103 19:33:03.729024   68208 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0103 19:33:03.768560   68208 cni.go:84] Creating CNI manager for ""
I0103 19:33:03.768566   68208 cni.go:136] multinode detected (1 nodes found), recommending kindnet
I0103 19:33:03.768596   68208 kubeadm.go:84] Using pod CIDR: 10.244.0.0/16
I0103 19:33:03.768622   68208 kubeadm.go:181] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.31.0 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:devops-multinode NodeName:devops-multinode DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[containerRuntimeEndpoint:unix:///var/run/cri-dockerd.sock hairpinMode:hairpin-veth runtimeRequestTimeout:15m] PrependCriSocketUnix:true}
I0103 19:33:03.768742   68208 kubeadm.go:187] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: unix:///var/run/cri-dockerd.sock
  name: "devops-multinode"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.31.0
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
containerRuntimeEndpoint: unix:///var/run/cri-dockerd.sock
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%"
  nodefs.inodesFree: "0%"
  imagefs.available: "0%"
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0103 19:33:03.768863   68208 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.31.0
I0103 19:33:03.778206   68208 binaries.go:44] Found k8s binaries, skipping transfer
I0103 19:33:03.778325   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0103 19:33:03.789526   68208 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (315 bytes)
I0103 19:33:03.804111   68208 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0103 19:33:03.815500   68208 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2158 bytes)
I0103 19:33:03.827173   68208 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0103 19:33:03.829465   68208 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0103 19:33:03.837245   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:03.885192   68208 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0103 19:33:03.904875   68208 certs.go:68] Setting up /Users/dayanandks/.minikube/profiles/devops-multinode for IP: 192.168.49.2
I0103 19:33:03.904883   68208 certs.go:194] generating shared ca certs ...
I0103 19:33:03.904898   68208 certs.go:226] acquiring lock for ca certs: {Name:mk0af299e16e1d29fd49eda1c1d76ce63a97d696 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:03.905394   68208 certs.go:235] skipping valid "minikubeCA" ca cert: /Users/dayanandks/.minikube/ca.key
I0103 19:33:03.905615   68208 certs.go:235] skipping valid "proxyClientCA" ca cert: /Users/dayanandks/.minikube/proxy-client-ca.key
I0103 19:33:03.905825   68208 certs.go:256] generating profile certs ...
I0103 19:33:03.905892   68208 certs.go:363] generating signed profile cert for "minikube-user": /Users/dayanandks/.minikube/profiles/devops-multinode/client.key
I0103 19:33:03.906147   68208 crypto.go:68] Generating cert /Users/dayanandks/.minikube/profiles/devops-multinode/client.crt with IP's: []
I0103 19:33:04.116626   68208 crypto.go:156] Writing cert to /Users/dayanandks/.minikube/profiles/devops-multinode/client.crt ...
I0103 19:33:04.116641   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.minikube/profiles/devops-multinode/client.crt: {Name:mk6255cde1d877d3d1a3439c527cfd9c51ffe77f Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:04.117540   68208 crypto.go:164] Writing key to /Users/dayanandks/.minikube/profiles/devops-multinode/client.key ...
I0103 19:33:04.117545   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.minikube/profiles/devops-multinode/client.key: {Name:mk8493cf982d51e5751f4a14c82731306f56dbd9 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:04.118277   68208 certs.go:363] generating signed profile cert for "minikube": /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.key.f0d30b65
I0103 19:33:04.118292   68208 crypto.go:68] Generating cert /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.crt.f0d30b65 with IP's: [10.96.0.1 127.0.0.1 10.0.0.1 192.168.49.2]
I0103 19:33:04.403412   68208 crypto.go:156] Writing cert to /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.crt.f0d30b65 ...
I0103 19:33:04.403422   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.crt.f0d30b65: {Name:mk06f658804c016797c47d987bb262b9df8139ba Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:04.403766   68208 crypto.go:164] Writing key to /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.key.f0d30b65 ...
I0103 19:33:04.403769   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.key.f0d30b65: {Name:mk411d55f6eba98ab88a8617085f0592a0e4484f Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:04.403976   68208 certs.go:381] copying /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.crt.f0d30b65 -> /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.crt
I0103 19:33:04.404167   68208 certs.go:385] copying /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.key.f0d30b65 -> /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.key
I0103 19:33:04.404352   68208 certs.go:363] generating signed profile cert for "aggregator": /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.key
I0103 19:33:04.404361   68208 crypto.go:68] Generating cert /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.crt with IP's: []
I0103 19:33:04.698379   68208 crypto.go:156] Writing cert to /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.crt ...
I0103 19:33:04.698385   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.crt: {Name:mk7daf15b99c619eecd5eaf5b2b30d060fc43495 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:04.698820   68208 crypto.go:164] Writing key to /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.key ...
I0103 19:33:04.698823   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.key: {Name:mkf13e2cbe2a1098fe51de61462ecfa48b0112db Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:04.699244   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/ca-key.pem (1675 bytes)
I0103 19:33:04.699282   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/ca.pem (1090 bytes)
I0103 19:33:04.699315   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/cert.pem (1131 bytes)
I0103 19:33:04.699343   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/key.pem (1679 bytes)
I0103 19:33:04.701482   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0103 19:33:04.731090   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0103 19:33:04.745863   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0103 19:33:04.760540   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0103 19:33:04.774629   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1424 bytes)
I0103 19:33:04.788759   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/profiles/devops-multinode/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1679 bytes)
I0103 19:33:04.803045   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0103 19:33:04.818642   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/profiles/devops-multinode/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0103 19:33:04.834290   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0103 19:33:04.856854   68208 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0103 19:33:04.868387   68208 ssh_runner.go:195] Run: openssl version
I0103 19:33:04.872505   68208 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0103 19:33:04.878905   68208 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:04.881208   68208 certs.go:528] hashing: -rw-r--r-- 1 root root 1111 Nov  7 04:19 /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:04.881248   68208 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:04.885898   68208 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0103 19:33:04.891202   68208 ssh_runner.go:195] Run: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt
I0103 19:33:04.893274   68208 certs.go:399] 'apiserver-kubelet-client' cert doesn't exist, likely first start: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt: Process exited with status 1
stdout:

stderr:
stat: cannot statx '/var/lib/minikube/certs/apiserver-kubelet-client.crt': No such file or directory
I0103 19:33:04.893340   68208 kubeadm.go:392] StartCluster: {Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0103 19:33:04.893479   68208 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0103 19:33:04.907830   68208 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0103 19:33:04.913006   68208 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0103 19:33:04.918446   68208 kubeadm.go:214] ignoring SystemVerification for kubeadm because of docker driver
I0103 19:33:04.918506   68208 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0103 19:33:04.923365   68208 kubeadm.go:155] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0103 19:33:04.923373   68208 kubeadm.go:157] found existing configuration files:

I0103 19:33:04.923439   68208 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf
I0103 19:33:04.928491   68208 kubeadm.go:163] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/admin.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/admin.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/admin.conf: No such file or directory
I0103 19:33:04.928572   68208 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/admin.conf
I0103 19:33:04.933764   68208 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf
I0103 19:33:04.938745   68208 kubeadm.go:163] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/kubelet.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/kubelet.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/kubelet.conf: No such file or directory
I0103 19:33:04.938865   68208 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/kubelet.conf
I0103 19:33:04.943790   68208 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf
I0103 19:33:04.948783   68208 kubeadm.go:163] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/controller-manager.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/controller-manager.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/controller-manager.conf: No such file or directory
I0103 19:33:04.948834   68208 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/controller-manager.conf
I0103 19:33:04.953571   68208 ssh_runner.go:195] Run: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf
I0103 19:33:04.958379   68208 kubeadm.go:163] "https://control-plane.minikube.internal:8443" may not be in /etc/kubernetes/scheduler.conf - will remove: sudo grep https://control-plane.minikube.internal:8443 /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
grep: /etc/kubernetes/scheduler.conf: No such file or directory
I0103 19:33:04.958435   68208 ssh_runner.go:195] Run: sudo rm -f /etc/kubernetes/scheduler.conf
I0103 19:33:04.963312   68208 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.31.0:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0103 19:33:05.002546   68208 kubeadm.go:310] [init] Using Kubernetes version: v1.31.0
I0103 19:33:05.002604   68208 kubeadm.go:310] [preflight] Running pre-flight checks
I0103 19:33:05.061661   68208 kubeadm.go:310] [preflight] Pulling images required for setting up a Kubernetes cluster
I0103 19:33:05.061775   68208 kubeadm.go:310] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0103 19:33:05.061887   68208 kubeadm.go:310] [preflight] You can also perform this action beforehand using 'kubeadm config images pull'
I0103 19:33:05.071777   68208 kubeadm.go:310] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0103 19:33:05.082441   68208 out.go:235]     ▪ Generating certificates and keys ...
I0103 19:33:05.082648   68208 kubeadm.go:310] [certs] Using existing ca certificate authority
I0103 19:33:05.082864   68208 kubeadm.go:310] [certs] Using existing apiserver certificate and key on disk
I0103 19:33:05.161979   68208 kubeadm.go:310] [certs] Generating "apiserver-kubelet-client" certificate and key
I0103 19:33:05.265600   68208 kubeadm.go:310] [certs] Generating "front-proxy-ca" certificate and key
I0103 19:33:05.500193   68208 kubeadm.go:310] [certs] Generating "front-proxy-client" certificate and key
I0103 19:33:05.554497   68208 kubeadm.go:310] [certs] Generating "etcd/ca" certificate and key
I0103 19:33:05.779537   68208 kubeadm.go:310] [certs] Generating "etcd/server" certificate and key
I0103 19:33:05.779686   68208 kubeadm.go:310] [certs] etcd/server serving cert is signed for DNS names [devops-multinode localhost] and IPs [192.168.49.2 127.0.0.1 ::1]
I0103 19:33:05.849618   68208 kubeadm.go:310] [certs] Generating "etcd/peer" certificate and key
I0103 19:33:05.849768   68208 kubeadm.go:310] [certs] etcd/peer serving cert is signed for DNS names [devops-multinode localhost] and IPs [192.168.49.2 127.0.0.1 ::1]
I0103 19:33:05.912894   68208 kubeadm.go:310] [certs] Generating "etcd/healthcheck-client" certificate and key
I0103 19:33:05.981407   68208 kubeadm.go:310] [certs] Generating "apiserver-etcd-client" certificate and key
I0103 19:33:06.135360   68208 kubeadm.go:310] [certs] Generating "sa" key and public key
I0103 19:33:06.135463   68208 kubeadm.go:310] [kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I0103 19:33:06.483719   68208 kubeadm.go:310] [kubeconfig] Writing "admin.conf" kubeconfig file
I0103 19:33:06.619461   68208 kubeadm.go:310] [kubeconfig] Writing "super-admin.conf" kubeconfig file
I0103 19:33:06.809965   68208 kubeadm.go:310] [kubeconfig] Writing "kubelet.conf" kubeconfig file
I0103 19:33:07.011473   68208 kubeadm.go:310] [kubeconfig] Writing "controller-manager.conf" kubeconfig file
I0103 19:33:07.104547   68208 kubeadm.go:310] [kubeconfig] Writing "scheduler.conf" kubeconfig file
I0103 19:33:07.104884   68208 kubeadm.go:310] [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I0103 19:33:07.107791   68208 kubeadm.go:310] [control-plane] Using manifest folder "/etc/kubernetes/manifests"
I0103 19:33:07.112218   68208 out.go:235]     ▪ Booting up control plane ...
I0103 19:33:07.112540   68208 kubeadm.go:310] [control-plane] Creating static Pod manifest for "kube-apiserver"
I0103 19:33:07.112627   68208 kubeadm.go:310] [control-plane] Creating static Pod manifest for "kube-controller-manager"
I0103 19:33:07.112713   68208 kubeadm.go:310] [control-plane] Creating static Pod manifest for "kube-scheduler"
I0103 19:33:07.116302   68208 kubeadm.go:310] [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
I0103 19:33:07.121697   68208 kubeadm.go:310] [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
I0103 19:33:07.121759   68208 kubeadm.go:310] [kubelet-start] Starting the kubelet
I0103 19:33:07.196637   68208 kubeadm.go:310] [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests"
I0103 19:33:07.196763   68208 kubeadm.go:310] [kubelet-check] Waiting for a healthy kubelet at http://127.0.0.1:10248/healthz. This can take up to 4m0s
I0103 19:33:07.698375   68208 kubeadm.go:310] [kubelet-check] The kubelet is healthy after 501.775667ms
I0103 19:33:07.698465   68208 kubeadm.go:310] [api-check] Waiting for a healthy API server. This can take up to 4m0s
I0103 19:33:13.711511   68208 kubeadm.go:310] [api-check] The API server is healthy after 6.008668462s
I0103 19:33:13.727536   68208 kubeadm.go:310] [upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I0103 19:33:13.738035   68208 kubeadm.go:310] [kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I0103 19:33:13.760944   68208 kubeadm.go:310] [upload-certs] Skipping phase. Please see --upload-certs
I0103 19:33:13.761231   68208 kubeadm.go:310] [mark-control-plane] Marking the node devops-multinode as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
I0103 19:33:13.767014   68208 kubeadm.go:310] [bootstrap-token] Using token: 6z0cp4.2szk8cvqdbiammb4
I0103 19:33:13.773796   68208 out.go:235]     ▪ Configuring RBAC rules ...
I0103 19:33:13.774267   68208 kubeadm.go:310] [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
I0103 19:33:13.776251   68208 kubeadm.go:310] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
I0103 19:33:13.779927   68208 kubeadm.go:310] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
I0103 19:33:13.781099   68208 kubeadm.go:310] [bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
I0103 19:33:13.782343   68208 kubeadm.go:310] [bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
I0103 19:33:13.783749   68208 kubeadm.go:310] [bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I0103 19:33:14.119095   68208 kubeadm.go:310] [kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I0103 19:33:14.529611   68208 kubeadm.go:310] [addons] Applied essential addon: CoreDNS
I0103 19:33:15.126429   68208 kubeadm.go:310] [addons] Applied essential addon: kube-proxy
I0103 19:33:15.128051   68208 kubeadm.go:310] 
I0103 19:33:15.128130   68208 kubeadm.go:310] Your Kubernetes control-plane has initialized successfully!
I0103 19:33:15.128137   68208 kubeadm.go:310] 
I0103 19:33:15.128421   68208 kubeadm.go:310] To start using your cluster, you need to run the following as a regular user:
I0103 19:33:15.128433   68208 kubeadm.go:310] 
I0103 19:33:15.128490   68208 kubeadm.go:310]   mkdir -p $HOME/.kube
I0103 19:33:15.128564   68208 kubeadm.go:310]   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
I0103 19:33:15.128624   68208 kubeadm.go:310]   sudo chown $(id -u):$(id -g) $HOME/.kube/config
I0103 19:33:15.128631   68208 kubeadm.go:310] 
I0103 19:33:15.128686   68208 kubeadm.go:310] Alternatively, if you are the root user, you can run:
I0103 19:33:15.128691   68208 kubeadm.go:310] 
I0103 19:33:15.128764   68208 kubeadm.go:310]   export KUBECONFIG=/etc/kubernetes/admin.conf
I0103 19:33:15.128808   68208 kubeadm.go:310] 
I0103 19:33:15.128866   68208 kubeadm.go:310] You should now deploy a pod network to the cluster.
I0103 19:33:15.128952   68208 kubeadm.go:310] Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
I0103 19:33:15.129044   68208 kubeadm.go:310]   https://kubernetes.io/docs/concepts/cluster-administration/addons/
I0103 19:33:15.129047   68208 kubeadm.go:310] 
I0103 19:33:15.129139   68208 kubeadm.go:310] You can now join any number of control-plane nodes by copying certificate authorities
I0103 19:33:15.129248   68208 kubeadm.go:310] and service account keys on each node and then running the following as root:
I0103 19:33:15.129253   68208 kubeadm.go:310] 
I0103 19:33:15.129353   68208 kubeadm.go:310]   kubeadm join control-plane.minikube.internal:8443 --token 6z0cp4.2szk8cvqdbiammb4 \
I0103 19:33:15.129471   68208 kubeadm.go:310] 	--discovery-token-ca-cert-hash sha256:20c6deee6e4f29914d898ae1fd82d826ab5d2ffbc2f311428cfe65d0ffb98743 \
I0103 19:33:15.129499   68208 kubeadm.go:310] 	--control-plane 
I0103 19:33:15.129503   68208 kubeadm.go:310] 
I0103 19:33:15.129606   68208 kubeadm.go:310] Then you can join any number of worker nodes by running the following on each as root:
I0103 19:33:15.129612   68208 kubeadm.go:310] 
I0103 19:33:15.129692   68208 kubeadm.go:310] kubeadm join control-plane.minikube.internal:8443 --token 6z0cp4.2szk8cvqdbiammb4 \
I0103 19:33:15.129851   68208 kubeadm.go:310] 	--discovery-token-ca-cert-hash sha256:20c6deee6e4f29914d898ae1fd82d826ab5d2ffbc2f311428cfe65d0ffb98743 
I0103 19:33:15.139780   68208 kubeadm.go:310] W0103 14:03:04.999583    1798 common.go:101] your configuration file uses a deprecated API spec: "kubeadm.k8s.io/v1beta3" (kind: "ClusterConfiguration"). Please use 'kubeadm config migrate --old-config old.yaml --new-config new.yaml', which will write the new, similar spec using a newer API version.
I0103 19:33:15.140151   68208 kubeadm.go:310] W0103 14:03:05.000075    1798 common.go:101] your configuration file uses a deprecated API spec: "kubeadm.k8s.io/v1beta3" (kind: "InitConfiguration"). Please use 'kubeadm config migrate --old-config old.yaml --new-config new.yaml', which will write the new, similar spec using a newer API version.
I0103 19:33:15.140431   68208 kubeadm.go:310] 	[WARNING Swap]: swap is supported for cgroup v2 only. The kubelet must be properly configured to use swap. Please refer to https://kubernetes.io/docs/concepts/architecture/nodes/#swap-memory, or disable swap on the node
I0103 19:33:15.140586   68208 kubeadm.go:310] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0103 19:33:15.140642   68208 cni.go:84] Creating CNI manager for ""
I0103 19:33:15.140652   68208 cni.go:136] multinode detected (1 nodes found), recommending kindnet
I0103 19:33:15.148286   68208 out.go:177] 🔗  Configuring CNI (Container Networking Interface) ...
I0103 19:33:15.151049   68208 ssh_runner.go:195] Run: stat /opt/cni/bin/portmap
I0103 19:33:15.159951   68208 cni.go:182] applying CNI manifest using /var/lib/minikube/binaries/v1.31.0/kubectl ...
I0103 19:33:15.159965   68208 ssh_runner.go:362] scp memory --> /var/tmp/minikube/cni.yaml (2601 bytes)
I0103 19:33:15.180141   68208 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.31.0/kubectl apply --kubeconfig=/var/lib/minikube/kubeconfig -f /var/tmp/minikube/cni.yaml
I0103 19:33:15.421214   68208 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0103 19:33:15.421430   68208 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.31.0/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0103 19:33:15.421572   68208 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.31.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig label --overwrite nodes devops-multinode minikube.k8s.io/updated_at=2025_01_03T19_33_15_0700 minikube.k8s.io/version=v1.34.0 minikube.k8s.io/commit=210b148df93a80eb872ecbeb7e35281b3c582c61 minikube.k8s.io/name=devops-multinode minikube.k8s.io/primary=true
I0103 19:33:15.428311   68208 ops.go:34] apiserver oom_adj: -16
I0103 19:33:15.552616   68208 kubeadm.go:1113] duration metric: took 131.377875ms to wait for elevateKubeSystemPrivileges
I0103 19:33:15.552641   68208 kubeadm.go:394] duration metric: took 10.65932875s to StartCluster
I0103 19:33:15.552683   68208 settings.go:142] acquiring lock: {Name:mk9a13cb98756580bc1345cbce34aed87d80a874 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:15.552894   68208 settings.go:150] Updating kubeconfig:  /Users/dayanandks/.kube/config
I0103 19:33:15.556511   68208 lock.go:35] WriteFile acquiring /Users/dayanandks/.kube/config: {Name:mk17d13cf20fd3c8bcc07f3fce9f8d5b4d709866 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:15.557248   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.31.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml"
I0103 19:33:15.557671   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:15.557682   68208 start.go:235] Will wait 6m0s for node &{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true}
I0103 19:33:15.557827   68208 addons.go:507] enable addons start: toEnable=map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:true efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false inspektor-gadget:false istio:false istio-provisioner:false kong:false kubeflow:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-device-plugin:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false storage-provisioner-rancher:false volcano:false volumesnapshots:false yakd:false]
I0103 19:33:15.558250   68208 addons.go:69] Setting default-storageclass=true in profile "devops-multinode"
I0103 19:33:15.558249   68208 addons.go:69] Setting storage-provisioner=true in profile "devops-multinode"
I0103 19:33:15.558401   68208 addons.go:234] Setting addon storage-provisioner=true in "devops-multinode"
I0103 19:33:15.558434   68208 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "devops-multinode"
I0103 19:33:15.558621   68208 host.go:66] Checking if "devops-multinode" exists ...
I0103 19:33:15.559278   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:15.559419   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:15.561346   68208 out.go:177] 🔎  Verifying Kubernetes components...
I0103 19:33:15.566450   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:15.718380   68208 out.go:177]     ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
I0103 19:33:15.721963   68208 addons.go:431] installing /etc/kubernetes/addons/storage-provisioner.yaml
I0103 19:33:15.721976   68208 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I0103 19:33:15.722103   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:15.731449   68208 addons.go:234] Setting addon default-storageclass=true in "devops-multinode"
I0103 19:33:15.731479   68208 host.go:66] Checking if "devops-multinode" exists ...
I0103 19:33:15.731845   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:15.744903   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.31.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.65.254 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.31.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -"
I0103 19:33:15.746855   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:15.779617   68208 addons.go:431] installing /etc/kubernetes/addons/storageclass.yaml
I0103 19:33:15.779629   68208 ssh_runner.go:362] scp storageclass/storageclass.yaml --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I0103 19:33:15.779764   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:15.783732   68208 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0103 19:33:15.816828   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:15.950510   68208 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.31.0/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I0103 19:33:15.950527   68208 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.31.0/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I0103 19:33:15.984176   68208 start.go:971] {"host.minikube.internal": 192.168.65.254} host record injected into CoreDNS's ConfigMap
I0103 19:33:15.984378   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:16.025565   68208 api_server.go:52] waiting for apiserver process to appear ...
I0103 19:33:16.025656   68208 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I0103 19:33:16.291065   68208 api_server.go:72] duration metric: took 733.354ms to wait for apiserver process to appear ...
I0103 19:33:16.291078   68208 api_server.go:88] waiting for apiserver healthz status ...
I0103 19:33:16.291097   68208 api_server.go:253] Checking apiserver healthz at https://127.0.0.1:55648/healthz ...
I0103 19:33:16.295255   68208 out.go:177] 🌟  Enabled addons: default-storageclass, storage-provisioner
I0103 19:33:16.299753   68208 api_server.go:279] https://127.0.0.1:55648/healthz returned 200:
ok
I0103 19:33:16.300893   68208 api_server.go:141] control plane version: v1.31.0
I0103 19:33:16.300901   68208 api_server.go:131] duration metric: took 9.819ms to wait for apiserver health ...
I0103 19:33:16.301225   68208 addons.go:510] duration metric: took 743.740541ms for enable addons: enabled=[default-storageclass storage-provisioner]
I0103 19:33:16.301394   68208 system_pods.go:43] waiting for kube-system pods to appear ...
I0103 19:33:16.309265   68208 system_pods.go:59] 5 kube-system pods found
I0103 19:33:16.309293   68208 system_pods.go:61] "etcd-devops-multinode" [7dde609e-da93-4330-8aca-852bededa755] Running / Ready:ContainersNotReady (containers with unready status: [etcd]) / ContainersReady:ContainersNotReady (containers with unready status: [etcd])
I0103 19:33:16.309316   68208 system_pods.go:61] "kube-apiserver-devops-multinode" [2e8e6616-14f2-4fe2-8f39-3be903995149] Running / Ready:ContainersNotReady (containers with unready status: [kube-apiserver]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-apiserver])
I0103 19:33:16.309334   68208 system_pods.go:61] "kube-controller-manager-devops-multinode" [741ca73d-6657-4c2f-9ba4-ca5a2d54ab18] Running / Ready:ContainersNotReady (containers with unready status: [kube-controller-manager]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-controller-manager])
I0103 19:33:16.309353   68208 system_pods.go:61] "kube-scheduler-devops-multinode" [11a65185-8fbb-4990-825e-8dbe643b4b45] Running / Ready:ContainersNotReady (containers with unready status: [kube-scheduler]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-scheduler])
I0103 19:33:16.309364   68208 system_pods.go:61] "storage-provisioner" [ec10e639-9538-4e5a-887e-557b1191aa6e] Pending: PodScheduled:Unschedulable (0/1 nodes are available: 1 node(s) had untolerated taint {node.kubernetes.io/not-ready: }. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling.)
I0103 19:33:16.309374   68208 system_pods.go:74] duration metric: took 7.971542ms to wait for pod list to return data ...
I0103 19:33:16.309389   68208 kubeadm.go:582] duration metric: took 751.676167ms to wait for: map[apiserver:true system_pods:true]
I0103 19:33:16.309406   68208 node_conditions.go:102] verifying NodePressure condition ...
I0103 19:33:16.312411   68208 node_conditions.go:122] node storage ephemeral capacity is 61202244Ki
I0103 19:33:16.312432   68208 node_conditions.go:123] node cpu capacity is 8
I0103 19:33:16.312449   68208 node_conditions.go:105] duration metric: took 3.0365ms to run NodePressure ...
I0103 19:33:16.312474   68208 start.go:241] waiting for startup goroutines ...
I0103 19:33:16.495410   68208 kapi.go:214] "coredns" deployment in "kube-system" namespace and "devops-multinode" context rescaled to 1 replicas
I0103 19:33:16.495481   68208 start.go:246] waiting for cluster config update ...
I0103 19:33:16.495526   68208 start.go:255] writing updated cluster config ...
I0103 19:33:16.499927   68208 out.go:201] 
I0103 19:33:16.504087   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:16.504397   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
I0103 19:33:16.508000   68208 out.go:177] 👍  Starting "devops-multinode-m02" worker node in "devops-multinode" cluster
I0103 19:33:16.514310   68208 cache.go:121] Beginning downloading kic base image for docker with docker
I0103 19:33:16.518297   68208 out.go:177] 🚜  Pulling base image v0.0.45 ...
I0103 19:33:16.523139   68208 preload.go:131] Checking if preload exists for k8s version v1.31.0 and runtime docker
I0103 19:33:16.523169   68208 cache.go:56] Caching tarball of preloaded images
I0103 19:33:16.523170   68208 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local docker daemon
I0103 19:33:16.523542   68208 preload.go:172] Found /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4 in cache, skipping download
I0103 19:33:16.523568   68208 cache.go:59] Finished verifying existence of preloaded tar for v1.31.0 on docker
I0103 19:33:16.523717   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
W0103 19:33:16.580767   68208 image.go:95] image gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 is of wrong architecture
I0103 19:33:16.580781   68208 cache.go:149] Downloading gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 to local cache
I0103 19:33:16.580926   68208 image.go:63] Checking for gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local cache directory
I0103 19:33:16.580946   68208 image.go:66] Found gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local cache directory, skipping pull
I0103 19:33:16.580950   68208 image.go:135] gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 exists in cache, skipping pull
I0103 19:33:16.580958   68208 cache.go:152] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 as a tarball
I0103 19:33:16.580961   68208 cache.go:162] Loading gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 from local cache
I0103 19:33:17.094662   68208 cache.go:164] successfully loaded and using gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 from cached tarball
I0103 19:33:17.094751   68208 cache.go:194] Successfully downloaded all kic artifacts
I0103 19:33:17.094816   68208 start.go:360] acquireMachinesLock for devops-multinode-m02: {Name:mk5545fbe29a6d93ea5c14f5cb614ea27d4707dc Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0103 19:33:17.095103   68208 start.go:364] duration metric: took 266.083µs to acquireMachinesLock for "devops-multinode-m02"
I0103 19:33:17.095149   68208 start.go:93] Provisioning new machine with config: &{Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true} {Name:m02 IP: Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}] Addons:map[default-storageclass:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} &{Name:m02 IP: Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}
I0103 19:33:17.095272   68208 start.go:125] createHost starting for "m02" (driver="docker")
I0103 19:33:17.097913   68208 out.go:235] 🔥  Creating docker container (CPUs=2, Memory=2200MB) ...
I0103 19:33:17.098036   68208 start.go:159] libmachine.API.Create for "devops-multinode" (driver="docker")
I0103 19:33:17.098050   68208 client.go:168] LocalClient.Create starting
I0103 19:33:17.098196   68208 main.go:141] libmachine: Reading certificate data from /Users/dayanandks/.minikube/certs/ca.pem
I0103 19:33:17.098426   68208 main.go:141] libmachine: Decoding PEM data...
I0103 19:33:17.098442   68208 main.go:141] libmachine: Parsing certificate...
I0103 19:33:17.098504   68208 main.go:141] libmachine: Reading certificate data from /Users/dayanandks/.minikube/certs/cert.pem
I0103 19:33:17.098820   68208 main.go:141] libmachine: Decoding PEM data...
I0103 19:33:17.098830   68208 main.go:141] libmachine: Parsing certificate...
I0103 19:33:17.101473   68208 cli_runner.go:164] Run: docker network inspect devops-multinode --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0103 19:33:17.130586   68208 network_create.go:77] Found existing network {name:devops-multinode subnet:0x140008b15c0 gateway:[0 0 0 0 0 0 0 0 0 0 255 255 192 168 49 1] mtu:65535}
I0103 19:33:17.130641   68208 kic.go:121] calculated static IP "192.168.49.3" for the "devops-multinode-m02" container
I0103 19:33:17.130920   68208 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0103 19:33:17.163067   68208 cli_runner.go:164] Run: docker volume create devops-multinode-m02 --label name.minikube.sigs.k8s.io=devops-multinode-m02 --label created_by.minikube.sigs.k8s.io=true
I0103 19:33:17.184859   68208 oci.go:103] Successfully created a docker volume devops-multinode-m02
I0103 19:33:17.185049   68208 cli_runner.go:164] Run: docker run --rm --name devops-multinode-m02-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=devops-multinode-m02 --entrypoint /usr/bin/test -v devops-multinode-m02:/var gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -d /var/lib
I0103 19:33:17.834825   68208 oci.go:107] Successfully prepared a docker volume devops-multinode-m02
I0103 19:33:17.834967   68208 preload.go:131] Checking if preload exists for k8s version v1.31.0 and runtime docker
I0103 19:33:17.835193   68208 kic.go:194] Starting extracting preloaded images to volume ...
I0103 19:33:17.835760   68208 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v devops-multinode-m02:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -I lz4 -xf /preloaded.tar -C /extractDir
I0103 19:33:22.163740   68208 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v devops-multinode-m02:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -I lz4 -xf /preloaded.tar -C /extractDir: (4.327740834s)
I0103 19:33:22.163924   68208 kic.go:203] duration metric: took 4.3287275s to extract preloaded images to volume ...
I0103 19:33:22.167695   68208 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0103 19:33:22.748860   68208 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname devops-multinode-m02 --name devops-multinode-m02 --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=devops-multinode-m02 --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=devops-multinode-m02 --network devops-multinode --ip 192.168.49.3 --volume devops-multinode-m02:/var --security-opt apparmor=unconfined --memory=2200mb --memory-swap=2200mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85
I0103 19:33:23.073406   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m02 --format={{.State.Running}}
I0103 19:33:23.106455   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m02 --format={{.State.Status}}
I0103 19:33:23.125875   68208 cli_runner.go:164] Run: docker exec devops-multinode-m02 stat /var/lib/dpkg/alternatives/iptables
I0103 19:33:23.200501   68208 oci.go:144] the created container "devops-multinode-m02" has a running status.
I0103 19:33:23.200591   68208 kic.go:225] Creating ssh key for kic: /Users/dayanandks/.minikube/machines/devops-multinode-m02/id_rsa...
I0103 19:33:23.246294   68208 kic_runner.go:191] docker (temp): /Users/dayanandks/.minikube/machines/devops-multinode-m02/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0103 19:33:23.302740   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m02 --format={{.State.Status}}
I0103 19:33:23.330571   68208 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0103 19:33:23.330589   68208 kic_runner.go:114] Args: [docker exec --privileged devops-multinode-m02 chown docker:docker /home/docker/.ssh/authorized_keys]
I0103 19:33:23.424074   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m02 --format={{.State.Status}}
I0103 19:33:23.443420   68208 machine.go:93] provisionDockerMachine start ...
I0103 19:33:23.443641   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:23.466801   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:23.467722   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55673 <nil> <nil>}
I0103 19:33:23.467729   68208 main.go:141] libmachine: About to run SSH command:
hostname
I0103 19:33:23.601685   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: devops-multinode-m02

I0103 19:33:23.601714   68208 ubuntu.go:169] provisioning hostname "devops-multinode-m02"
I0103 19:33:23.601852   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:23.623087   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:23.623298   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55673 <nil> <nil>}
I0103 19:33:23.623304   68208 main.go:141] libmachine: About to run SSH command:
sudo hostname devops-multinode-m02 && echo "devops-multinode-m02" | sudo tee /etc/hostname
I0103 19:33:23.752910   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: devops-multinode-m02

I0103 19:33:23.753091   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:23.783478   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:23.783762   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55673 <nil> <nil>}
I0103 19:33:23.783772   68208 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sdevops-multinode-m02' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 devops-multinode-m02/g' /etc/hosts;
			else 
				echo '127.0.1.1 devops-multinode-m02' | sudo tee -a /etc/hosts; 
			fi
		fi
I0103 19:33:23.896887   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0103 19:33:23.896926   68208 ubuntu.go:175] set auth options {CertDir:/Users/dayanandks/.minikube CaCertPath:/Users/dayanandks/.minikube/certs/ca.pem CaPrivateKeyPath:/Users/dayanandks/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/Users/dayanandks/.minikube/machines/server.pem ServerKeyPath:/Users/dayanandks/.minikube/machines/server-key.pem ClientKeyPath:/Users/dayanandks/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/Users/dayanandks/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/Users/dayanandks/.minikube}
I0103 19:33:23.896989   68208 ubuntu.go:177] setting up certificates
I0103 19:33:23.897004   68208 provision.go:84] configureAuth start
I0103 19:33:23.897319   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode-m02
I0103 19:33:23.927430   68208 provision.go:143] copyHostCerts
I0103 19:33:23.927543   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/ca.pem, removing ...
I0103 19:33:23.927550   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/ca.pem
I0103 19:33:23.927689   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/ca.pem --> /Users/dayanandks/.minikube/ca.pem (1090 bytes)
I0103 19:33:23.928130   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/cert.pem, removing ...
I0103 19:33:23.928135   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/cert.pem
I0103 19:33:23.928226   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/cert.pem --> /Users/dayanandks/.minikube/cert.pem (1131 bytes)
I0103 19:33:23.928520   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/key.pem, removing ...
I0103 19:33:23.928522   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/key.pem
I0103 19:33:23.928592   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/key.pem --> /Users/dayanandks/.minikube/key.pem (1679 bytes)
I0103 19:33:23.928816   68208 provision.go:117] generating server cert: /Users/dayanandks/.minikube/machines/server.pem ca-key=/Users/dayanandks/.minikube/certs/ca.pem private-key=/Users/dayanandks/.minikube/certs/ca-key.pem org=dayanandks.devops-multinode-m02 san=[127.0.0.1 192.168.49.3 devops-multinode-m02 localhost minikube]
I0103 19:33:24.026411   68208 provision.go:177] copyRemoteCerts
I0103 19:33:24.026494   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0103 19:33:24.026546   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:24.058111   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55673 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m02/id_rsa Username:docker}
I0103 19:33:24.148550   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/machines/server.pem --> /etc/docker/server.pem (1237 bytes)
I0103 19:33:24.180195   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0103 19:33:24.200244   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1090 bytes)
I0103 19:33:24.215448   68208 provision.go:87] duration metric: took 318.433541ms to configureAuth
I0103 19:33:24.215461   68208 ubuntu.go:193] setting minikube options for container-runtime
I0103 19:33:24.215773   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:24.215855   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:24.235353   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:24.235540   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55673 <nil> <nil>}
I0103 19:33:24.235545   68208 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0103 19:33:24.355365   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0103 19:33:24.355398   68208 ubuntu.go:71] root file system type: overlay
I0103 19:33:24.356427   68208 provision.go:314] Updating docker unit: /lib/systemd/system/docker.service ...
I0103 19:33:24.356630   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:24.384508   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:24.384783   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55673 <nil> <nil>}
I0103 19:33:24.384860   68208 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %s "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure

Environment="NO_PROXY=192.168.49.2"


# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0103 19:33:24.510318   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure

Environment=NO_PROXY=192.168.49.2


# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0103 19:33:24.510523   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:24.541195   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:24.541559   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55673 <nil> <nil>}
I0103 19:33:24.541576   68208 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0103 19:33:25.090812   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2024-08-27 14:13:43.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2025-01-03 14:03:24.507218003 +0000
@@ -1,46 +1,50 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
+Environment=NO_PROXY=192.168.49.2
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
+LimitNOFILE=infinity
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0103 19:33:25.090837   68208 machine.go:96] duration metric: took 1.64739475s to provisionDockerMachine
I0103 19:33:25.090853   68208 client.go:171] duration metric: took 7.992813291s to LocalClient.Create
I0103 19:33:25.090895   68208 start.go:167] duration metric: took 7.992866333s to libmachine.API.Create "devops-multinode"
I0103 19:33:25.090905   68208 start.go:293] postStartSetup for "devops-multinode-m02" (driver="docker")
I0103 19:33:25.090921   68208 start.go:322] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0103 19:33:25.091100   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0103 19:33:25.091181   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:25.136694   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55673 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m02/id_rsa Username:docker}
I0103 19:33:25.223733   68208 ssh_runner.go:195] Run: cat /etc/os-release
I0103 19:33:25.226308   68208 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0103 19:33:25.226335   68208 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0103 19:33:25.226343   68208 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0103 19:33:25.226348   68208 info.go:137] Remote host: Ubuntu 22.04.4 LTS
I0103 19:33:25.226356   68208 filesync.go:126] Scanning /Users/dayanandks/.minikube/addons for local assets ...
I0103 19:33:25.226781   68208 filesync.go:126] Scanning /Users/dayanandks/.minikube/files for local assets ...
I0103 19:33:25.226850   68208 start.go:296] duration metric: took 135.939541ms for postStartSetup
I0103 19:33:25.228330   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode-m02
I0103 19:33:25.259468   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
I0103 19:33:25.259993   68208 start.go:128] duration metric: took 8.164719s to createHost
I0103 19:33:25.260003   68208 start.go:83] releasing machines lock for "devops-multinode-m02", held for 8.164905s
I0103 19:33:25.260101   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode-m02
I0103 19:33:25.288227   68208 out.go:177] 🌐  Found network options:
I0103 19:33:25.301212   68208 out.go:177]     ▪ NO_PROXY=192.168.49.2
W0103 19:33:25.310435   68208 proxy.go:119] fail to check proxy env: Error ip not in block
W0103 19:33:25.310488   68208 proxy.go:119] fail to check proxy env: Error ip not in block
I0103 19:33:25.310672   68208 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0103 19:33:25.310675   68208 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0103 19:33:25.310731   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:25.311071   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m02
I0103 19:33:25.331634   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55673 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m02/id_rsa Username:docker}
I0103 19:33:25.331688   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55673 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m02/id_rsa Username:docker}
I0103 19:33:25.694127   68208 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0103 19:33:25.732181   68208 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0103 19:33:25.732462   68208 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%p, " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0103 19:33:25.762436   68208 cni.go:262] disabled [/etc/cni/net.d/100-crio-bridge.conf, /etc/cni/net.d/87-podman-bridge.conflist] bridge cni config(s)
I0103 19:33:25.762489   68208 start.go:495] detecting cgroup driver to use...
I0103 19:33:25.762517   68208 detect.go:187] detected "cgroupfs" cgroup driver on host os
I0103 19:33:25.762936   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0103 19:33:25.775278   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.10"|' /etc/containerd/config.toml"
I0103 19:33:25.782296   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0103 19:33:25.788657   68208 containerd.go:146] configuring containerd to use "cgroupfs" as cgroup driver...
I0103 19:33:25.788824   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0103 19:33:25.794880   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0103 19:33:25.801282   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0103 19:33:25.808880   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0103 19:33:25.815346   68208 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0103 19:33:25.821179   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0103 19:33:25.828174   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i '/^ *enable_unprivileged_ports = .*/d' /etc/containerd/config.toml"
I0103 19:33:25.841838   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)\[plugins."io.containerd.grpc.v1.cri"\]|&\n\1  enable_unprivileged_ports = true|' /etc/containerd/config.toml"
I0103 19:33:25.863872   68208 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0103 19:33:25.875334   68208 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0103 19:33:25.885545   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:25.959574   68208 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0103 19:33:26.069508   68208 start.go:495] detecting cgroup driver to use...
I0103 19:33:26.069529   68208 detect.go:187] detected "cgroupfs" cgroup driver on host os
I0103 19:33:26.069954   68208 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0103 19:33:26.088856   68208 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0103 19:33:26.088999   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0103 19:33:26.106580   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0103 19:33:26.126929   68208 ssh_runner.go:195] Run: which cri-dockerd
I0103 19:33:26.131029   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0103 19:33:26.138414   68208 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (190 bytes)
I0103 19:33:26.151393   68208 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0103 19:33:26.221527   68208 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0103 19:33:26.280023   68208 docker.go:574] configuring docker to use "cgroupfs" as cgroup driver...
I0103 19:33:26.280103   68208 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (130 bytes)
I0103 19:33:26.299582   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:26.374960   68208 ssh_runner.go:195] Run: sudo systemctl restart docker
I0103 19:33:26.599613   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.socket
I0103 19:33:26.611169   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0103 19:33:26.619829   68208 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0103 19:33:26.670061   68208 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0103 19:33:26.721002   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:26.780339   68208 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0103 19:33:26.804550   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0103 19:33:26.813221   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:26.862813   68208 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.service
I0103 19:33:26.962839   68208 start.go:542] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0103 19:33:26.964268   68208 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0103 19:33:26.969085   68208 start.go:563] Will wait 60s for crictl version
I0103 19:33:26.969200   68208 ssh_runner.go:195] Run: which crictl
I0103 19:33:26.972302   68208 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0103 19:33:27.015674   68208 start.go:579] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  27.2.0
RuntimeApiVersion:  v1
I0103 19:33:27.015796   68208 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0103 19:33:27.045569   68208 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0103 19:33:27.067929   68208 out.go:235] 🐳  Preparing Kubernetes v1.31.0 on Docker 27.2.0 ...
I0103 19:33:27.073910   68208 out.go:177]     ▪ env NO_PROXY=192.168.49.2
I0103 19:33:27.081029   68208 cli_runner.go:164] Run: docker exec -t devops-multinode-m02 dig +short host.docker.internal
I0103 19:33:27.232623   68208 network.go:96] got host ip for mount in container by digging dns: 192.168.65.254
I0103 19:33:27.233086   68208 ssh_runner.go:195] Run: grep 192.168.65.254	host.minikube.internal$ /etc/hosts
I0103 19:33:27.236655   68208 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.65.254	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0103 19:33:27.244795   68208 mustload.go:65] Loading cluster: devops-multinode
I0103 19:33:27.245099   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:27.246277   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:27.275599   68208 host.go:66] Checking if "devops-multinode" exists ...
I0103 19:33:27.275934   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:27.294730   68208 certs.go:68] Setting up /Users/dayanandks/.minikube/profiles/devops-multinode for IP: 192.168.49.3
I0103 19:33:27.294755   68208 certs.go:194] generating shared ca certs ...
I0103 19:33:27.294785   68208 certs.go:226] acquiring lock for ca certs: {Name:mk0af299e16e1d29fd49eda1c1d76ce63a97d696 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:27.295214   68208 certs.go:235] skipping valid "minikubeCA" ca cert: /Users/dayanandks/.minikube/ca.key
I0103 19:33:27.295419   68208 certs.go:235] skipping valid "proxyClientCA" ca cert: /Users/dayanandks/.minikube/proxy-client-ca.key
I0103 19:33:27.295702   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/ca-key.pem (1675 bytes)
I0103 19:33:27.295750   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/ca.pem (1090 bytes)
I0103 19:33:27.295795   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/cert.pem (1131 bytes)
I0103 19:33:27.295822   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/key.pem (1679 bytes)
I0103 19:33:27.295871   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0103 19:33:27.312299   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0103 19:33:27.326784   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0103 19:33:27.341506   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0103 19:33:27.355860   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0103 19:33:27.370751   68208 ssh_runner.go:195] Run: openssl version
I0103 19:33:27.375979   68208 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0103 19:33:27.384413   68208 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:27.387028   68208 certs.go:528] hashing: -rw-r--r-- 1 root root 1111 Nov  7 04:19 /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:27.387073   68208 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:27.391911   68208 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0103 19:33:27.398755   68208 ssh_runner.go:195] Run: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt
I0103 19:33:27.400907   68208 certs.go:399] 'apiserver-kubelet-client' cert doesn't exist, likely first start: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt: Process exited with status 1
stdout:

stderr:
stat: cannot statx '/var/lib/minikube/certs/apiserver-kubelet-client.crt': No such file or directory
I0103 19:33:27.400935   68208 kubeadm.go:934] updating node {m02 192.168.49.3 8443 v1.31.0 docker false true} ...
I0103 19:33:27.401472   68208 kubeadm.go:946] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.31.0/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --hostname-override=devops-multinode-m02 --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.3

[Install]
 config:
{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:}
I0103 19:33:27.401543   68208 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.31.0
I0103 19:33:27.406673   68208 binaries.go:44] Found k8s binaries, skipping transfer
I0103 19:33:27.406768   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system
I0103 19:33:27.412017   68208 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (319 bytes)
I0103 19:33:27.422754   68208 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0103 19:33:27.438779   68208 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0103 19:33:27.441619   68208 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0103 19:33:27.449050   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:27.507365   68208 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0103 19:33:27.524137   68208 host.go:66] Checking if "devops-multinode" exists ...
I0103 19:33:27.524452   68208 start.go:317] joinCluster: &{Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true} {Name:m02 IP:192.168.49.3 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}] Addons:map[default-storageclass:true storage-provisioner:true] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0103 19:33:27.524571   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.31.0:$PATH" kubeadm token create --print-join-command --ttl=0"
I0103 19:33:27.524671   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:27.551077   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:27.864969   68208 start.go:343] trying to join worker node "m02" to cluster: &{Name:m02 IP:192.168.49.3 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}
I0103 19:33:27.865012   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.31.0:$PATH" kubeadm join control-plane.minikube.internal:8443 --token hp31o3.m17wab8y1dmh4m74 --discovery-token-ca-cert-hash sha256:20c6deee6e4f29914d898ae1fd82d826ab5d2ffbc2f311428cfe65d0ffb98743 --ignore-preflight-errors=all --cri-socket unix:///var/run/cri-dockerd.sock --node-name=devops-multinode-m02"
I0103 19:33:29.142969   68208 ssh_runner.go:235] Completed: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.31.0:$PATH" kubeadm join control-plane.minikube.internal:8443 --token hp31o3.m17wab8y1dmh4m74 --discovery-token-ca-cert-hash sha256:20c6deee6e4f29914d898ae1fd82d826ab5d2ffbc2f311428cfe65d0ffb98743 --ignore-preflight-errors=all --cri-socket unix:///var/run/cri-dockerd.sock --node-name=devops-multinode-m02": (1.277920667s)
I0103 19:33:29.143271   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo systemctl daemon-reload && sudo systemctl enable kubelet && sudo systemctl start kubelet"
I0103 19:33:29.271806   68208 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.31.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig label --overwrite nodes devops-multinode-m02 minikube.k8s.io/updated_at=2025_01_03T19_33_29_0700 minikube.k8s.io/version=v1.34.0 minikube.k8s.io/commit=210b148df93a80eb872ecbeb7e35281b3c582c61 minikube.k8s.io/name=devops-multinode minikube.k8s.io/primary=false
I0103 19:33:29.547359   68208 start.go:319] duration metric: took 2.022922958s to joinCluster
I0103 19:33:29.547589   68208 start.go:235] Will wait 6m0s for node &{Name:m02 IP:192.168.49.3 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}
I0103 19:33:29.547992   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:29.551741   68208 out.go:177] 🔎  Verifying Kubernetes components...
I0103 19:33:29.558910   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:29.663677   68208 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0103 19:33:29.676916   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:29.718790   68208 kubeadm.go:582] duration metric: took 171.164208ms to wait for: map[apiserver:true system_pods:true]
I0103 19:33:29.718812   68208 node_conditions.go:102] verifying NodePressure condition ...
I0103 19:33:29.724381   68208 node_conditions.go:122] node storage ephemeral capacity is 61202244Ki
I0103 19:33:29.724390   68208 node_conditions.go:123] node cpu capacity is 8
I0103 19:33:29.724420   68208 node_conditions.go:122] node storage ephemeral capacity is 61202244Ki
I0103 19:33:29.724423   68208 node_conditions.go:123] node cpu capacity is 8
I0103 19:33:29.724425   68208 node_conditions.go:105] duration metric: took 5.610667ms to run NodePressure ...
I0103 19:33:29.724432   68208 start.go:241] waiting for startup goroutines ...
I0103 19:33:29.724654   68208 start.go:255] writing updated cluster config ...
I0103 19:33:29.728899   68208 out.go:201] 
I0103 19:33:29.732114   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:29.732178   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
I0103 19:33:29.736785   68208 out.go:177] 👍  Starting "devops-multinode-m03" worker node in "devops-multinode" cluster
I0103 19:33:29.741893   68208 cache.go:121] Beginning downloading kic base image for docker with docker
I0103 19:33:29.744905   68208 out.go:177] 🚜  Pulling base image v0.0.45 ...
I0103 19:33:29.750721   68208 preload.go:131] Checking if preload exists for k8s version v1.31.0 and runtime docker
I0103 19:33:29.750727   68208 image.go:79] Checking for gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local docker daemon
I0103 19:33:29.750739   68208 cache.go:56] Caching tarball of preloaded images
I0103 19:33:29.750834   68208 preload.go:172] Found /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4 in cache, skipping download
I0103 19:33:29.750840   68208 cache.go:59] Finished verifying existence of preloaded tar for v1.31.0 on docker
I0103 19:33:29.750924   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
W0103 19:33:29.822565   68208 image.go:95] image gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 is of wrong architecture
I0103 19:33:29.822585   68208 cache.go:149] Downloading gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 to local cache
I0103 19:33:29.822693   68208 image.go:63] Checking for gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local cache directory
I0103 19:33:29.822708   68208 image.go:66] Found gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 in local cache directory, skipping pull
I0103 19:33:29.822712   68208 image.go:135] gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 exists in cache, skipping pull
I0103 19:33:29.822717   68208 cache.go:152] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 as a tarball
I0103 19:33:29.822720   68208 cache.go:162] Loading gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 from local cache
I0103 19:33:30.920106   68208 cache.go:164] successfully loaded and using gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 from cached tarball
I0103 19:33:30.920245   68208 cache.go:194] Successfully downloaded all kic artifacts
I0103 19:33:30.920413   68208 start.go:360] acquireMachinesLock for devops-multinode-m03: {Name:mkf0b002635425c71957af190ef9633821aceb52 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0103 19:33:30.921035   68208 start.go:364] duration metric: took 505.583µs to acquireMachinesLock for "devops-multinode-m03"
I0103 19:33:30.921130   68208 start.go:93] Provisioning new machine with config: &{Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true} {Name:m02 IP:192.168.49.3 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true} {Name:m03 IP: Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}] Addons:map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:false efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false inspektor-gadget:false istio:false istio-provisioner:false kong:false kubeflow:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-device-plugin:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:false storage-provisioner-gluster:false storage-provisioner-rancher:false volcano:false volumesnapshots:false yakd:false] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s} &{Name:m03 IP: Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}
I0103 19:33:30.921519   68208 start.go:125] createHost starting for "m03" (driver="docker")
I0103 19:33:30.927696   68208 out.go:235] 🔥  Creating docker container (CPUs=2, Memory=2200MB) ...
I0103 19:33:30.928144   68208 start.go:159] libmachine.API.Create for "devops-multinode" (driver="docker")
I0103 19:33:30.928177   68208 client.go:168] LocalClient.Create starting
I0103 19:33:30.928476   68208 main.go:141] libmachine: Reading certificate data from /Users/dayanandks/.minikube/certs/ca.pem
I0103 19:33:30.928588   68208 main.go:141] libmachine: Decoding PEM data...
I0103 19:33:30.928609   68208 main.go:141] libmachine: Parsing certificate...
I0103 19:33:30.928696   68208 main.go:141] libmachine: Reading certificate data from /Users/dayanandks/.minikube/certs/cert.pem
I0103 19:33:30.928756   68208 main.go:141] libmachine: Decoding PEM data...
I0103 19:33:30.928779   68208 main.go:141] libmachine: Parsing certificate...
I0103 19:33:30.931304   68208 cli_runner.go:164] Run: docker network inspect devops-multinode --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0103 19:33:30.987085   68208 network_create.go:77] Found existing network {name:devops-multinode subnet:0x14001e89bc0 gateway:[0 0 0 0 0 0 0 0 0 0 255 255 192 168 49 1] mtu:65535}
I0103 19:33:30.987140   68208 kic.go:121] calculated static IP "192.168.49.4" for the "devops-multinode-m03" container
I0103 19:33:30.987297   68208 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0103 19:33:31.015330   68208 cli_runner.go:164] Run: docker volume create devops-multinode-m03 --label name.minikube.sigs.k8s.io=devops-multinode-m03 --label created_by.minikube.sigs.k8s.io=true
I0103 19:33:31.040136   68208 oci.go:103] Successfully created a docker volume devops-multinode-m03
I0103 19:33:31.040288   68208 cli_runner.go:164] Run: docker run --rm --name devops-multinode-m03-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=devops-multinode-m03 --entrypoint /usr/bin/test -v devops-multinode-m03:/var gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -d /var/lib
I0103 19:33:31.788334   68208 oci.go:107] Successfully prepared a docker volume devops-multinode-m03
I0103 19:33:31.788435   68208 preload.go:131] Checking if preload exists for k8s version v1.31.0 and runtime docker
I0103 19:33:31.788510   68208 kic.go:194] Starting extracting preloaded images to volume ...
I0103 19:33:31.788800   68208 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v devops-multinode-m03:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -I lz4 -xf /preloaded.tar -C /extractDir
I0103 19:33:34.619218   68208 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /Users/dayanandks/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.31.0-docker-overlay2-arm64.tar.lz4:/preloaded.tar:ro -v devops-multinode-m03:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 -I lz4 -xf /preloaded.tar -C /extractDir: (2.830282417s)
I0103 19:33:34.619376   68208 kic.go:203] duration metric: took 2.830869542s to extract preloaded images to volume ...
I0103 19:33:34.620018   68208 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0103 19:33:35.225747   68208 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname devops-multinode-m03 --name devops-multinode-m03 --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=devops-multinode-m03 --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=devops-multinode-m03 --network devops-multinode --ip 192.168.49.4 --volume devops-multinode-m03:/var --security-opt apparmor=unconfined --memory=2200mb --memory-swap=2200mb --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85
I0103 19:33:35.655172   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m03 --format={{.State.Running}}
I0103 19:33:35.686578   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m03 --format={{.State.Status}}
I0103 19:33:35.710750   68208 cli_runner.go:164] Run: docker exec devops-multinode-m03 stat /var/lib/dpkg/alternatives/iptables
I0103 19:33:35.792382   68208 oci.go:144] the created container "devops-multinode-m03" has a running status.
I0103 19:33:35.792419   68208 kic.go:225] Creating ssh key for kic: /Users/dayanandks/.minikube/machines/devops-multinode-m03/id_rsa...
I0103 19:33:36.072486   68208 kic_runner.go:191] docker (temp): /Users/dayanandks/.minikube/machines/devops-multinode-m03/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0103 19:33:36.122972   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m03 --format={{.State.Status}}
I0103 19:33:36.157521   68208 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0103 19:33:36.157560   68208 kic_runner.go:114] Args: [docker exec --privileged devops-multinode-m03 chown docker:docker /home/docker/.ssh/authorized_keys]
I0103 19:33:36.243857   68208 cli_runner.go:164] Run: docker container inspect devops-multinode-m03 --format={{.State.Status}}
I0103 19:33:36.283773   68208 machine.go:93] provisionDockerMachine start ...
I0103 19:33:36.284075   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:36.316236   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:36.316623   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55721 <nil> <nil>}
I0103 19:33:36.316628   68208 main.go:141] libmachine: About to run SSH command:
hostname
I0103 19:33:36.448140   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: devops-multinode-m03

I0103 19:33:36.448170   68208 ubuntu.go:169] provisioning hostname "devops-multinode-m03"
I0103 19:33:36.448304   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:36.470721   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:36.471719   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55721 <nil> <nil>}
I0103 19:33:36.471727   68208 main.go:141] libmachine: About to run SSH command:
sudo hostname devops-multinode-m03 && echo "devops-multinode-m03" | sudo tee /etc/hostname
I0103 19:33:36.596185   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: devops-multinode-m03

I0103 19:33:36.596364   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:36.634934   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:36.635209   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55721 <nil> <nil>}
I0103 19:33:36.635220   68208 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sdevops-multinode-m03' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 devops-multinode-m03/g' /etc/hosts;
			else 
				echo '127.0.1.1 devops-multinode-m03' | sudo tee -a /etc/hosts; 
			fi
		fi
I0103 19:33:36.751892   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0103 19:33:36.751916   68208 ubuntu.go:175] set auth options {CertDir:/Users/dayanandks/.minikube CaCertPath:/Users/dayanandks/.minikube/certs/ca.pem CaPrivateKeyPath:/Users/dayanandks/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/Users/dayanandks/.minikube/machines/server.pem ServerKeyPath:/Users/dayanandks/.minikube/machines/server-key.pem ClientKeyPath:/Users/dayanandks/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/Users/dayanandks/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/Users/dayanandks/.minikube}
I0103 19:33:36.751945   68208 ubuntu.go:177] setting up certificates
I0103 19:33:36.751959   68208 provision.go:84] configureAuth start
I0103 19:33:36.752126   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode-m03
I0103 19:33:36.779130   68208 provision.go:143] copyHostCerts
I0103 19:33:36.779317   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/ca.pem, removing ...
I0103 19:33:36.779329   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/ca.pem
I0103 19:33:36.779515   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/ca.pem --> /Users/dayanandks/.minikube/ca.pem (1090 bytes)
I0103 19:33:36.779860   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/cert.pem, removing ...
I0103 19:33:36.779864   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/cert.pem
I0103 19:33:36.779960   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/cert.pem --> /Users/dayanandks/.minikube/cert.pem (1131 bytes)
I0103 19:33:36.780206   68208 exec_runner.go:144] found /Users/dayanandks/.minikube/key.pem, removing ...
I0103 19:33:36.780209   68208 exec_runner.go:203] rm: /Users/dayanandks/.minikube/key.pem
I0103 19:33:36.780293   68208 exec_runner.go:151] cp: /Users/dayanandks/.minikube/certs/key.pem --> /Users/dayanandks/.minikube/key.pem (1679 bytes)
I0103 19:33:36.780552   68208 provision.go:117] generating server cert: /Users/dayanandks/.minikube/machines/server.pem ca-key=/Users/dayanandks/.minikube/certs/ca.pem private-key=/Users/dayanandks/.minikube/certs/ca-key.pem org=dayanandks.devops-multinode-m03 san=[127.0.0.1 192.168.49.4 devops-multinode-m03 localhost minikube]
I0103 19:33:36.927439   68208 provision.go:177] copyRemoteCerts
I0103 19:33:36.927539   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0103 19:33:36.927593   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:36.948446   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55721 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m03/id_rsa Username:docker}
I0103 19:33:37.034021   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1090 bytes)
I0103 19:33:37.050871   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/machines/server.pem --> /etc/docker/server.pem (1237 bytes)
I0103 19:33:37.066168   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0103 19:33:37.080912   68208 provision.go:87] duration metric: took 328.945584ms to configureAuth
I0103 19:33:37.080922   68208 ubuntu.go:193] setting minikube options for container-runtime
I0103 19:33:37.081356   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:37.081444   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:37.100825   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:37.101025   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55721 <nil> <nil>}
I0103 19:33:37.101030   68208 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0103 19:33:37.212662   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0103 19:33:37.212675   68208 ubuntu.go:71] root file system type: overlay
I0103 19:33:37.212837   68208 provision.go:314] Updating docker unit: /lib/systemd/system/docker.service ...
I0103 19:33:37.212969   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:37.249675   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:37.249998   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55721 <nil> <nil>}
I0103 19:33:37.250077   68208 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %s "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure

Environment="NO_PROXY=192.168.49.2"
Environment="NO_PROXY=192.168.49.2,192.168.49.3"


# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0103 19:33:37.384786   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure

Environment=NO_PROXY=192.168.49.2
Environment=NO_PROXY=192.168.49.2,192.168.49.3


# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0103 19:33:37.384945   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:37.429000   68208 main.go:141] libmachine: Using SSH client type: native
I0103 19:33:37.429333   68208 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x1011245a0] 0x101126e00 <nil>  [] 0s} 127.0.0.1 55721 <nil> <nil>}
I0103 19:33:37.429351   68208 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0103 19:33:38.105913   68208 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2024-08-27 14:13:43.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2025-01-03 14:03:37.382218009 +0000
@@ -1,46 +1,51 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service time-set.target
-Wants=network-online.target containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
+Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutStartSec=0
-RestartSec=2
-Restart=always
+Restart=on-failure
 
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
+Environment=NO_PROXY=192.168.49.2
+Environment=NO_PROXY=192.168.49.2,192.168.49.3
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
+LimitNOFILE=infinity
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0103 19:33:38.105981   68208 machine.go:96] duration metric: took 1.822163291s to provisionDockerMachine
I0103 19:33:38.106026   68208 client.go:171] duration metric: took 7.177846666s to LocalClient.Create
I0103 19:33:38.106153   68208 start.go:167] duration metric: took 7.178023917s to libmachine.API.Create "devops-multinode"
I0103 19:33:38.106164   68208 start.go:293] postStartSetup for "devops-multinode-m03" (driver="docker")
I0103 19:33:38.106182   68208 start.go:322] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0103 19:33:38.106429   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0103 19:33:38.106534   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:38.164747   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55721 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m03/id_rsa Username:docker}
I0103 19:33:38.299625   68208 ssh_runner.go:195] Run: cat /etc/os-release
I0103 19:33:38.326181   68208 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0103 19:33:38.326244   68208 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0103 19:33:38.326254   68208 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0103 19:33:38.326273   68208 info.go:137] Remote host: Ubuntu 22.04.4 LTS
I0103 19:33:38.326297   68208 filesync.go:126] Scanning /Users/dayanandks/.minikube/addons for local assets ...
I0103 19:33:38.326553   68208 filesync.go:126] Scanning /Users/dayanandks/.minikube/files for local assets ...
I0103 19:33:38.326664   68208 start.go:296] duration metric: took 220.49425ms for postStartSetup
I0103 19:33:38.329118   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode-m03
I0103 19:33:38.368081   68208 profile.go:143] Saving config to /Users/dayanandks/.minikube/profiles/devops-multinode/config.json ...
I0103 19:33:38.369140   68208 start.go:128] duration metric: took 7.447611084s to createHost
I0103 19:33:38.369155   68208 start.go:83] releasing machines lock for "devops-multinode-m03", held for 7.448098833s
I0103 19:33:38.369265   68208 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" devops-multinode-m03
I0103 19:33:38.404660   68208 out.go:177] 🌐  Found network options:
I0103 19:33:38.408982   68208 out.go:177]     ▪ NO_PROXY=192.168.49.2,192.168.49.3
W0103 19:33:38.412738   68208 proxy.go:119] fail to check proxy env: Error ip not in block
W0103 19:33:38.412762   68208 proxy.go:119] fail to check proxy env: Error ip not in block
W0103 19:33:38.412782   68208 proxy.go:119] fail to check proxy env: Error ip not in block
W0103 19:33:38.412788   68208 proxy.go:119] fail to check proxy env: Error ip not in block
I0103 19:33:38.412979   68208 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0103 19:33:38.413066   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:38.413165   68208 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0103 19:33:38.413218   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode-m03
I0103 19:33:38.447069   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55721 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m03/id_rsa Username:docker}
I0103 19:33:38.447290   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55721 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode-m03/id_rsa Username:docker}
I0103 19:33:39.010223   68208 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0103 19:33:39.035393   68208 cni.go:230] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0103 19:33:39.035556   68208 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%p, " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0103 19:33:39.061898   68208 cni.go:262] disabled [/etc/cni/net.d/100-crio-bridge.conf, /etc/cni/net.d/87-podman-bridge.conflist] bridge cni config(s)
I0103 19:33:39.061931   68208 start.go:495] detecting cgroup driver to use...
I0103 19:33:39.061957   68208 detect.go:187] detected "cgroupfs" cgroup driver on host os
I0103 19:33:39.062163   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0103 19:33:39.074363   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.10"|' /etc/containerd/config.toml"
I0103 19:33:39.081315   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0103 19:33:39.087870   68208 containerd.go:146] configuring containerd to use "cgroupfs" as cgroup driver...
I0103 19:33:39.088100   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = false|g' /etc/containerd/config.toml"
I0103 19:33:39.094345   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0103 19:33:39.099955   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0103 19:33:39.106196   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0103 19:33:39.111880   68208 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0103 19:33:39.118032   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0103 19:33:39.124786   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i '/^ *enable_unprivileged_ports = .*/d' /etc/containerd/config.toml"
I0103 19:33:39.132443   68208 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)\[plugins."io.containerd.grpc.v1.cri"\]|&\n\1  enable_unprivileged_ports = true|' /etc/containerd/config.toml"
I0103 19:33:39.139410   68208 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0103 19:33:39.144945   68208 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0103 19:33:39.150840   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:39.228557   68208 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0103 19:33:39.335016   68208 start.go:495] detecting cgroup driver to use...
I0103 19:33:39.335051   68208 detect.go:187] detected "cgroupfs" cgroup driver on host os
I0103 19:33:39.335201   68208 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0103 19:33:39.348418   68208 cruntime.go:279] skipping containerd shutdown because we are bound to it
I0103 19:33:39.348569   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0103 19:33:39.361774   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0103 19:33:39.376573   68208 ssh_runner.go:195] Run: which cri-dockerd
I0103 19:33:39.381561   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0103 19:33:39.388825   68208 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (190 bytes)
I0103 19:33:39.404067   68208 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0103 19:33:39.475633   68208 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0103 19:33:39.545830   68208 docker.go:574] configuring docker to use "cgroupfs" as cgroup driver...
I0103 19:33:39.545898   68208 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (130 bytes)
I0103 19:33:39.562180   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:39.649473   68208 ssh_runner.go:195] Run: sudo systemctl restart docker
I0103 19:33:40.054427   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.socket
I0103 19:33:40.067070   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0103 19:33:40.076449   68208 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0103 19:33:40.135294   68208 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0103 19:33:40.215856   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:40.275965   68208 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0103 19:33:40.307401   68208 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service cri-docker.service
I0103 19:33:40.317008   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:40.376577   68208 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.service
I0103 19:33:40.468824   68208 start.go:542] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0103 19:33:40.469012   68208 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0103 19:33:40.472403   68208 start.go:563] Will wait 60s for crictl version
I0103 19:33:40.472548   68208 ssh_runner.go:195] Run: which crictl
I0103 19:33:40.476031   68208 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0103 19:33:40.518785   68208 start.go:579] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  27.2.0
RuntimeApiVersion:  v1
I0103 19:33:40.518930   68208 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0103 19:33:40.560072   68208 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0103 19:33:40.589125   68208 out.go:235] 🐳  Preparing Kubernetes v1.31.0 on Docker 27.2.0 ...
I0103 19:33:40.595077   68208 out.go:177]     ▪ env NO_PROXY=192.168.49.2
I0103 19:33:40.602280   68208 out.go:177]     ▪ env NO_PROXY=192.168.49.2,192.168.49.3
I0103 19:33:40.604085   68208 cli_runner.go:164] Run: docker exec -t devops-multinode-m03 dig +short host.docker.internal
I0103 19:33:40.754580   68208 network.go:96] got host ip for mount in container by digging dns: 192.168.65.254
I0103 19:33:40.754819   68208 ssh_runner.go:195] Run: grep 192.168.65.254	host.minikube.internal$ /etc/hosts
I0103 19:33:40.758537   68208 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.65.254	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0103 19:33:40.768404   68208 mustload.go:65] Loading cluster: devops-multinode
I0103 19:33:40.768785   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:40.769418   68208 cli_runner.go:164] Run: docker container inspect devops-multinode --format={{.State.Status}}
I0103 19:33:40.794580   68208 host.go:66] Checking if "devops-multinode" exists ...
I0103 19:33:40.795025   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:40.824084   68208 certs.go:68] Setting up /Users/dayanandks/.minikube/profiles/devops-multinode for IP: 192.168.49.4
I0103 19:33:40.824120   68208 certs.go:194] generating shared ca certs ...
I0103 19:33:40.824141   68208 certs.go:226] acquiring lock for ca certs: {Name:mk0af299e16e1d29fd49eda1c1d76ce63a97d696 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0103 19:33:40.824704   68208 certs.go:235] skipping valid "minikubeCA" ca cert: /Users/dayanandks/.minikube/ca.key
I0103 19:33:40.824895   68208 certs.go:235] skipping valid "proxyClientCA" ca cert: /Users/dayanandks/.minikube/proxy-client-ca.key
I0103 19:33:40.825066   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/ca-key.pem (1675 bytes)
I0103 19:33:40.825108   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/ca.pem (1090 bytes)
I0103 19:33:40.825173   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/cert.pem (1131 bytes)
I0103 19:33:40.825214   68208 certs.go:484] found cert: /Users/dayanandks/.minikube/certs/key.pem (1679 bytes)
I0103 19:33:40.825272   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0103 19:33:40.872878   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0103 19:33:40.909388   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0103 19:33:40.935260   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0103 19:33:40.954682   68208 ssh_runner.go:362] scp /Users/dayanandks/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0103 19:33:40.974381   68208 ssh_runner.go:195] Run: openssl version
I0103 19:33:40.980808   68208 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0103 19:33:40.989672   68208 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:40.998128   68208 certs.go:528] hashing: -rw-r--r-- 1 root root 1111 Nov  7 04:19 /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:40.998537   68208 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0103 19:33:41.009626   68208 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0103 19:33:41.018977   68208 ssh_runner.go:195] Run: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt
I0103 19:33:41.021444   68208 certs.go:399] 'apiserver-kubelet-client' cert doesn't exist, likely first start: stat /var/lib/minikube/certs/apiserver-kubelet-client.crt: Process exited with status 1
stdout:

stderr:
stat: cannot statx '/var/lib/minikube/certs/apiserver-kubelet-client.crt': No such file or directory
I0103 19:33:41.021488   68208 kubeadm.go:934] updating node {m03 192.168.49.4 8443 v1.31.0 docker false true} ...
I0103 19:33:41.021651   68208 kubeadm.go:946] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.31.0/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --hostname-override=devops-multinode-m03 --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.4

[Install]
 config:
{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:}
I0103 19:33:41.021780   68208 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.31.0
I0103 19:33:41.028215   68208 binaries.go:44] Found k8s binaries, skipping transfer
I0103 19:33:41.028327   68208 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system
I0103 19:33:41.034890   68208 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (319 bytes)
I0103 19:33:41.047638   68208 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0103 19:33:41.066943   68208 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0103 19:33:41.069399   68208 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0103 19:33:41.076039   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:41.129503   68208 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0103 19:33:41.155801   68208 host.go:66] Checking if "devops-multinode" exists ...
I0103 19:33:41.156091   68208 start.go:317] joinCluster: &{Name:devops-multinode KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.45@sha256:81df288595202a317b1a4dc2506ca2e4ed5f22373c19a441b88cfbf4b9867c85 Memory:2200 CPUs:2 DiskSize:20000 Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:8443 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.31.0 ClusterName:devops-multinode Namespace:default APIServerHAVIP: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:true Worker:true} {Name:m02 IP:192.168.49.3 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true} {Name:m03 IP:192.168.49.4 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}] Addons:map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:false efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false inspektor-gadget:false istio:false istio-provisioner:false kong:false kubeflow:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-device-plugin:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:false storage-provisioner-gluster:false storage-provisioner-rancher:false volcano:false volumesnapshots:false yakd:false] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:true ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/Users:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP: SSHAuthSock: SSHAgentPID:0 GPUs: AutoPauseInterval:1m0s}
I0103 19:33:41.156236   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.31.0:$PATH" kubeadm token create --print-join-command --ttl=0"
I0103 19:33:41.156321   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:41.187856   68208 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:55644 SSHKeyPath:/Users/dayanandks/.minikube/machines/devops-multinode/id_rsa Username:docker}
I0103 19:33:41.370895   68208 start.go:343] trying to join worker node "m03" to cluster: &{Name:m03 IP:192.168.49.4 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}
I0103 19:33:41.370959   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.31.0:$PATH" kubeadm join control-plane.minikube.internal:8443 --token mvupol.ethy6a7cvexiv8uj --discovery-token-ca-cert-hash sha256:20c6deee6e4f29914d898ae1fd82d826ab5d2ffbc2f311428cfe65d0ffb98743 --ignore-preflight-errors=all --cri-socket unix:///var/run/cri-dockerd.sock --node-name=devops-multinode-m03"
I0103 19:33:42.852794   68208 ssh_runner.go:235] Completed: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.31.0:$PATH" kubeadm join control-plane.minikube.internal:8443 --token mvupol.ethy6a7cvexiv8uj --discovery-token-ca-cert-hash sha256:20c6deee6e4f29914d898ae1fd82d826ab5d2ffbc2f311428cfe65d0ffb98743 --ignore-preflight-errors=all --cri-socket unix:///var/run/cri-dockerd.sock --node-name=devops-multinode-m03": (1.481771542s)
I0103 19:33:42.852900   68208 ssh_runner.go:195] Run: /bin/bash -c "sudo systemctl daemon-reload && sudo systemctl enable kubelet && sudo systemctl start kubelet"
I0103 19:33:42.997083   68208 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.31.0/kubectl --kubeconfig=/var/lib/minikube/kubeconfig label --overwrite nodes devops-multinode-m03 minikube.k8s.io/updated_at=2025_01_03T19_33_42_0700 minikube.k8s.io/version=v1.34.0 minikube.k8s.io/commit=210b148df93a80eb872ecbeb7e35281b3c582c61 minikube.k8s.io/name=devops-multinode minikube.k8s.io/primary=false
I0103 19:33:43.091878   68208 start.go:319] duration metric: took 1.935779959s to joinCluster
I0103 19:33:43.092048   68208 start.go:235] Will wait 6m0s for node &{Name:m03 IP:192.168.49.4 Port:8443 KubernetesVersion:v1.31.0 ContainerRuntime:docker ControlPlane:false Worker:true}
I0103 19:33:43.092452   68208 config.go:182] Loaded profile config "devops-multinode": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.31.0
I0103 19:33:43.095569   68208 out.go:177] 🔎  Verifying Kubernetes components...
I0103 19:33:43.101993   68208 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0103 19:33:43.196664   68208 ssh_runner.go:195] Run: sudo systemctl start kubelet
I0103 19:33:43.209160   68208 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "8443/tcp") 0).HostPort}}'" devops-multinode
I0103 19:33:43.245730   68208 kubeadm.go:582] duration metric: took 153.634917ms to wait for: map[apiserver:true system_pods:true]
I0103 19:33:43.245757   68208 node_conditions.go:102] verifying NodePressure condition ...
I0103 19:33:43.250467   68208 node_conditions.go:122] node storage ephemeral capacity is 61202244Ki
I0103 19:33:43.250475   68208 node_conditions.go:123] node cpu capacity is 8
I0103 19:33:43.250494   68208 node_conditions.go:122] node storage ephemeral capacity is 61202244Ki
I0103 19:33:43.250496   68208 node_conditions.go:123] node cpu capacity is 8
I0103 19:33:43.250498   68208 node_conditions.go:122] node storage ephemeral capacity is 61202244Ki
I0103 19:33:43.250500   68208 node_conditions.go:123] node cpu capacity is 8
I0103 19:33:43.250503   68208 node_conditions.go:105] duration metric: took 4.742208ms to run NodePressure ...
I0103 19:33:43.250509   68208 start.go:241] waiting for startup goroutines ...
I0103 19:33:43.250530   68208 start.go:255] writing updated cluster config ...
I0103 19:33:43.251169   68208 ssh_runner.go:195] Run: rm -f paused
I0103 19:33:43.454506   68208 start.go:600] kubectl: 1.30.2, cluster: 1.31.0 (minor skew: 1)
I0103 19:33:43.458604   68208 out.go:177] 🏄  Done! kubectl is now configured to use "devops-multinode" cluster and "default" namespace by default


